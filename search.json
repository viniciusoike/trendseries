[{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"important-always-read-coding-guidelines-first","dir":"","previous_headings":"","what":"Important: Always Read Coding Guidelines First","title":"Trendseries Package Development Guide","text":"writing code, always read claude/coding_guidelines.md modern R development patterns, tidyverse best practices, rlang usage guidelines. comprehensive guide covers: - Modern tidyverse patterns (dplyr 1.1+, native pipe |>) - Advanced rlang metaprogramming {{}}, !!, data masking - Function design, error handling, performance patterns - Migration legacy R patterns modern approaches","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"package-vision","dir":"","previous_headings":"","what":"Package Vision","title":"Trendseries Package Development Guide","text":"Trendseries designed facilitate exploratory time series analysis monthly quarterly economic data. package provides simple, modern interface extracting trends economic time series using established econometric methods.","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"target-use-cases","dir":"","previous_headings":"","what":"Target Use Cases","title":"Trendseries Package Development Guide","text":"Exploratory analysis economic indicators (GDP, inflation, employment, etc.) Business cycle analysis trend extraction Comparative analysis multiple economic time series Parameter experimentation trend extraction methods","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"id_1-augment_trends","dir":"","previous_headings":"Core Architecture: Two Main Functions","what":"1. augment_trends()","title":"Trendseries Package Development Guide","text":"Purpose: Pipe-friendly function tibble/data.frame workflows - Adds trend columns existing data - Supports grouped operations multiple time series - Integrates seamlessly dplyr workflows - Handles naming conflicts intelligently - Returns original data additional trend columns","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"id_2-extract_trends","dir":"","previous_headings":"Core Architecture: Two Main Functions","what":"2. extract_trends()","title":"Trendseries Package Development Guide","text":"Purpose: Direct time series object analysis - Works ts, xts, zoo objects - Returns trend components time series objects - Focused pure econometric analysis - Optimized ts-based workflows","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"data-focus","dir":"","previous_headings":"","what":"Data Focus","title":"Trendseries Package Development Guide","text":"Primary focus: Monthly data (frequency = 12) Quarterly data (frequency = 4) Optimized defaults economic time series business cycle analysis mind Methods like STL moving averages can handle daily frequencies Smart defaults calibrated standard economic frequencies","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"r-style-guidelines","dir":"","previous_headings":"Coding Standards","what":"R Style Guidelines","title":"Trendseries Package Development Guide","text":"Follow tidyverse style guide strictly Use native pipe |> (magrittr %>%) Keep pipe chains maximum 4-5 operations. Don’t go 10-15 lines code without breaking smaller functions. Use <- assignment (never =) Always include explicit return() statements functions","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"for-vignettes-and-examples","dir":"","previous_headings":"Coding Standards","what":"For vignettes and examples","title":"Trendseries Package Development Guide","text":"Always split data processing plotting separate code chunks.","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"error-handling-and-messages","dir":"","previous_headings":"Coding Standards","what":"Error Handling and Messages","title":"Trendseries Package Development Guide","text":"Use cli package user messages, warnings, errors. Avoid using cat, print, message directly. Provide informative error messages suggested solutions. Include parameter validation clear feedback","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"function-design","dir":"","previous_headings":"Coding Standards","what":"Function Design","title":"Trendseries Package Development Guide","text":"Clear, descriptive parameter names Comprehensive input validation Consistent naming conventions across functions Type checking critical parameters","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"core-dependencies","dir":"","previous_headings":"Dependencies Strategy","what":"Core Dependencies","title":"Trendseries Package Development Guide","text":"tsbox: Robust time series format conversion mFilter: Econometric filtering methods (Baxter-King, Christiano-Fitzgerald, HP) cli: Modern messaging error handling RcppRoll: Fast C++ implementations rolling statistics (mean, median, etc.) forecast: Optimized exponential smoothing (ses, holt) automatic parameter selection dlm: Dynamic linear models Kalman filtering signal: Signal processing including Savitzky-Golay Butterworth filters hpfilter: One-sided two-sided HP filter implementations","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"optional-integration","dir":"","previous_headings":"Dependencies Strategy","what":"Optional Integration","title":"Trendseries Package Development Guide","text":"dplyr: enhanced data manipulation (suggested, required)","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"essential-economic-filters","dir":"","previous_headings":"Trend Methods Priority","what":"Essential Economic Filters","title":"Trendseries Package Development Guide","text":"Hodrick-Prescott (HP): Standard business cycle filter Baxter-King: Bandpass filter business cycles Christiano-Fitzgerald: Asymmetric bandpass filter Moving Averages: Economic-appropriate windows STL Decomposition: Seasonal-trend decomposition Base R Smoothers: loess, smooth.spline, lowess","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"smart-parameter-defaults","dir":"","previous_headings":"Trend Methods Priority","what":"Smart Parameter Defaults","title":"Trendseries Package Development Guide","text":"HP filter: λ=1600 (quarterly), λ=14400 (monthly) Moving averages: 4-quarter, 12-month standard windows STL: Economic seasonality-appropriate parameters","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"testing-strategy","dir":"","previous_headings":"","what":"Testing Strategy","title":"Trendseries Package Development Guide","text":"Comprehensive unit tests main functions Integration tests real economic data Parameter validation testing Multi-series operation testing Performance benchmarking realistic data sizes","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"development-workflow","dir":"","previous_headings":"","what":"Development Workflow","title":"Trendseries Package Development Guide","text":"Always run devtools::check() committing Test functions provided Brazilian economic datasets Document parameter choices defaults Include real economic examples documentation","code":""},{"path":"https://viniciusoike.github.io/trendseries/CLAUDE.html","id":"current-package-status","dir":"","previous_headings":"","what":"Current Package Status","title":"Trendseries Package Development Guide","text":"Completed: Major package restructure optimized methods simplified API RcppRoll package fast C++ rolling statistics (replaces TTR better performance) forecast package optimized exponential smoothing automatic parameter selection signal package Savitzky-Golay Butterworth filtering dlm package robust Kalman smoothing hpfilter package one-sided two-sided HP filtering API: Unified parameter system (window, smoothing, band, align, params) reduced function signatures Focus: Two-function architecture modern R practices economic data optimization Version: Ready 1.0.0 release","code":""},{"path":"https://viniciusoike.github.io/trendseries/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 trendseries authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Advanced Trend Extraction Methods","text":"vignette covers advanced trend extraction methods go beyond simple moving averages standard economic filters. methods designed specific situations: STL decomposition: Seasonal data complex patterns Kalman filter: Optimal smoothing state-space models Savitzky-Golay filter: Preserving peaks local features Spline smoothing: Highly flexible nonparametric trends LOESS: Locally adaptive smoothing","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"when-to-use-advanced-methods","dir":"Articles","previous_headings":"Introduction","what":"When to Use Advanced Methods","title":"Advanced Trend Extraction Methods","text":"Use methods : - data seasonal patterns (STL) - need optimal statistical properties (Kalman) - Local features like peaks matter (Savitzky-Golay) - trend highly nonlinear (splines, LOESS) - Standard methods don’t capture pattern see","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"stl-decomposition-handling-seasonality","dir":"Articles","previous_headings":"","what":"STL Decomposition: Handling Seasonality","title":"Advanced Trend Extraction Methods","text":"STL (Seasonal-Trend decomposition using LOESS) ideal data regular seasonal patterns. decomposes time series three components: seasonal, trend, remainder.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"basic-stl-example","dir":"Articles","previous_headings":"STL Decomposition: Handling Seasonality","what":"Basic STL Example","title":"Advanced Trend Extraction Methods","text":"Let’s use electricity consumption data, clear seasonal patterns: Visualize decomposition:  Notice STL trend much smoother original data removed seasonal fluctuations.","code":"# Get recent electricity data electric_recent <- electric |>   slice_tail(n = 72)  # Last 6 years  # Apply STL decomposition electric_stl <- electric_recent |>   augment_trends(     value_col = \"electric\",     methods = \"stl\"   )  # STL returns the trend component head(electric_stl) #> # A tibble: 6 × 3 #>   date       electric trend_stl #>   <date>        <dbl>     <dbl> #> 1 2019-08-01    10987    11709. #> 2 2019-09-01    11379    11759. #> 3 2019-10-01    11973    11810. #> 4 2019-11-01    12424    11865. #> 5 2019-12-01    12201    11921. #> 6 2020-01-01    12909    11981. # Calculate seasonal and remainder components electric_decomp <- electric_stl |>   mutate(     seasonal = electric - trend_stl,  # Approximate seasonal (for visualization)     trend = trend_stl   )  # Plot original and trend p1 <- electric_decomp |>   select(date, electric, trend) |>   pivot_longer(cols = c(electric, trend), names_to = \"series\") |>   mutate(series = ifelse(series == \"electric\", \"Original\", \"Trend\")) |>   ggplot(aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Electricity Consumption: STL Trend\",     subtitle = \"Trend component removes seasonal patterns\",     x = NULL,     y = \"GWh\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  print(p1)"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"comparing-stl-with-hp-filter-on-seasonal-data","dir":"Articles","previous_headings":"STL Decomposition: Handling Seasonality","what":"Comparing STL with HP Filter on Seasonal Data","title":"Advanced Trend Extraction Methods","text":"Let’s compare STL HP filter seasonal data:  three methods remove seasonality degree, STL specifically designed purpose.","code":"# Apply both methods electric_comparison <- electric_recent |>   augment_trends(     value_col = \"electric\",     methods = c(\"stl\", \"hp\", \"ma\"),     window = 12  # 12-month window for MA   )  # Plot comparison electric_comparison |>   select(date, electric, trend_stl, trend_hp, trend_ma) |>   pivot_longer(     cols = c(electric, starts_with(\"trend_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"electric\" ~ \"Original\",       method == \"trend_stl\" ~ \"STL\",       method == \"trend_hp\" ~ \"HP Filter\",       method == \"trend_ma\" ~ \"12-month MA\"     )   ) |>   ggplot(aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Comparing Methods on Seasonal Data\",     subtitle = \"STL explicitly handles seasonality\",     x = \"Date\",     y = \"GWh\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"when-to-use-stl","dir":"Articles","previous_headings":"STL Decomposition: Handling Seasonality","what":"When to Use STL","title":"Advanced Trend Extraction Methods","text":"Use STL : - Data clear monthly quarterly seasonal patterns - Seasonality strength varies time - want separately analyze seasonal trend components Don’t use STL : - Data seasonality (use HP MA instead) - Seasonal pattern irregular (try methods) - short time series (need least 2 full cycles)","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"kalman-filter-optimal-statistical-smoothing","dir":"Articles","previous_headings":"","what":"Kalman Filter: Optimal Statistical Smoothing","title":"Advanced Trend Extraction Methods","text":"Kalman filter provides statistically optimal smoothing certain assumptions. ’s based state-space models widely used engineering finance.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"basic-kalman-smoothing","dir":"Articles","previous_headings":"Kalman Filter: Optimal Statistical Smoothing","what":"Basic Kalman Smoothing","title":"Advanced Trend Extraction Methods","text":"","code":"# Apply Kalman filter to IBC-Br data ibcbr_recent <- ibcbr |>   slice_tail(n = 120)  ibcbr_kalman <- ibcbr_recent |>   augment_trends(     value_col = \"ibcbr\",     methods = \"kalman\"   )  # Compare with HP filter ibcbr_comparison <- ibcbr_recent |>   augment_trends(     value_col = \"ibcbr\",     methods = c(\"kalman\", \"hp\", \"loess\")   )  # Plot ibcbr_comparison |>   select(date, ibcbr, starts_with(\"trend_\")) |>   pivot_longer(     cols = c(ibcbr, starts_with(\"trend_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"ibcbr\" ~ \"Original\",       method == \"trend_kalman\" ~ \"Kalman\",       method == \"trend_hp\" ~ \"HP Filter\",       method == \"trend_loess\" ~ \"LOESS\"     )   ) |>   ggplot(aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Kalman Filter vs Other Methods\",     subtitle = \"IBC-Br Economic Activity Index\",     x = \"Date\",     y = \"Index\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"adjusting-kalman-smoothing","dir":"Articles","previous_headings":"Kalman Filter: Optimal Statistical Smoothing","what":"Adjusting Kalman Smoothing","title":"Advanced Trend Extraction Methods","text":"can control smoothness smoothing parameter (higher values = smoothing):  use Kalman: - want statistically principled smoothing - Data noisy clear underlying trend - need real-time filtering (Kalman works well streaming data)","code":"# Try different smoothing levels smoothing_levels <- c(0.5, 1.0, 2.0, 5.0)  vehicles_recent <- vehicles |>   slice_tail(n = 60)  vehicles_kalman <- vehicles_recent  for (s in smoothing_levels) {   temp <- vehicles_recent |>     augment_trends(value_col = \"vehicles\", methods = \"kalman\", smoothing = s) |>     select(trend_kalman)    names(temp) <- paste0(\"kalman_\", s)   vehicles_kalman <- bind_cols(vehicles_kalman, temp) }  # Plot vehicles_kalman |>   select(date, vehicles, starts_with(\"kalman_\")) |>   pivot_longer(     cols = c(vehicles, starts_with(\"kalman_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"vehicles\" ~ \"Original\",       method == \"kalman_0.5\" ~ \"Light smoothing\",       method == \"kalman_1\" ~ \"Medium smoothing\",       method == \"kalman_2\" ~ \"Heavy smoothing\",       method == \"kalman_5\" ~ \"Very heavy smoothing\"     )   ) |>   ggplot(aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Kalman Filter with Different Smoothing Levels\",     subtitle = \"Higher values produce smoother trends\",     x = \"Date\",     y = \"Production (thousands)\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"savitzky-golay-filter-preserving-features","dir":"Articles","previous_headings":"","what":"Savitzky-Golay Filter: Preserving Features","title":"Advanced Trend Extraction Methods","text":"Savitzky-Golay (SG) filter designed preserve local features like peaks valleys smoothing. fits local polynomials data.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"basic-sg-example","dir":"Articles","previous_headings":"Savitzky-Golay Filter: Preserving Features","what":"Basic SG Example","title":"Advanced Trend Extraction Methods","text":"Notice SG preserves peaks valleys better simple moving average.","code":"# Apply SG filter to vehicle production vehicles_sg <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = \"sg\",     window = 9  # Must be odd number   )  # Compare SG with MA vehicles_comparison <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = c(\"sg\", \"ma\", \"loess\"),     window = 9   )  # Plot vehicles_comparison |>   select(date, vehicles, starts_with(\"trend_\")) |>   pivot_longer(     cols = c(vehicles, starts_with(\"trend_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"vehicles\" ~ \"Original\",       method == \"trend_sg\" ~ \"Savitzky-Golay\",       method == \"trend_ma\" ~ \"Moving Average\",       method == \"trend_loess\" ~ \"LOESS\"     )   ) |>   ggplot(aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Savitzky-Golay vs Other Smoothers\",     subtitle = \"SG preserves peaks better than simple MA\",     x = \"Date\",     y = \"Production (thousands)\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"polynomial-order","dir":"Articles","previous_headings":"Savitzky-Golay Filter: Preserving Features","what":"Polynomial Order","title":"Advanced Trend Extraction Methods","text":"can adjust polynomial order (higher order = flexible):  use Savitzky-Golay: - Peaks valleys data meaningful - want smoothing without losing local structure - Data relatively smooth (noisy)","code":"# Try different polynomial orders vehicles_sg_poly <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = \"sg\",     window = 9,     params = list(sg_poly_order = 2)   ) |>   rename(sg_order2 = trend_sg)  vehicles_sg_poly <- vehicles_sg_poly |>   augment_trends(     value_col = \"vehicles\",     methods = \"sg\",     window = 9,     params = list(sg_poly_order = 3)   ) |>   rename(sg_order3 = trend_sg)  vehicles_sg_poly <- vehicles_sg_poly |>   augment_trends(     value_col = \"vehicles\",     methods = \"sg\",     window = 9,     params = list(sg_poly_order = 4)   )  # Plot vehicles_sg_poly |>   select(date, vehicles, sg_order2, sg_order3, trend_sg) |>   pivot_longer(     cols = c(vehicles, sg_order2, sg_order3, trend_sg),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"vehicles\" ~ \"Original\",       method == \"sg_order2\" ~ \"Order 2 (quadratic)\",       method == \"sg_order3\" ~ \"Order 3 (cubic)\",       method == \"trend_sg\" ~ \"Order 4\"     )   ) |>   ggplot(aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Savitzky-Golay with Different Polynomial Orders\",     subtitle = \"Higher orders preserve more detail\",     x = \"Date\",     y = \"Production (thousands)\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"loess-locally-adaptive-smoothing","dir":"Articles","previous_headings":"","what":"LOESS: Locally Adaptive Smoothing","title":"Advanced Trend Extraction Methods","text":"LOESS (LOcally Estimated Scatterplot Smoothing) fits local weighted regressions. ’s flexible adapts local data patterns.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"basic-loess","dir":"Articles","previous_headings":"LOESS: Locally Adaptive Smoothing","what":"Basic LOESS","title":"Advanced Trend Extraction Methods","text":"","code":"# Apply LOESS to IBC-Br ibcbr_loess <- ibcbr_recent |>   augment_trends(     value_col = \"ibcbr\",     methods = \"loess\",     smoothing = 0.2  # Span parameter (0-1)   )  # Plot ibcbr_loess |>   select(date, ibcbr, trend_loess) |>   pivot_longer(cols = c(ibcbr, trend_loess), names_to = \"series\") |>   mutate(series = ifelse(series == \"ibcbr\", \"Original\", \"LOESS Trend\")) |>   ggplot(aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.8) +   labs(     title = \"LOESS Smoothing\",     subtitle = \"Locally adaptive polynomial regression\",     x = \"Date\",     y = \"Index\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"adjusting-the-span-parameter","dir":"Articles","previous_headings":"LOESS: Locally Adaptive Smoothing","what":"Adjusting the Span Parameter","title":"Advanced Trend Extraction Methods","text":"span parameter controls smoothness (0-1, larger = smoother):  Recommended span values: - Flexible trend: 0.1 - 0.2 - Balanced: 0.2 - 0.4 - Smooth: 0.5 - 0.75 use LOESS: - Trend nonlinear complex - want data-adaptive smoothing - Sample size moderate (LOESS can slow large datasets)","code":"# Try different spans spans <- c(0.1, 0.2, 0.4, 0.7)  ibcbr_spans <- ibcbr_recent  for (span in spans) {   temp <- ibcbr_recent |>     augment_trends(value_col = \"ibcbr\", methods = \"loess\", smoothing = span) |>     select(trend_loess)    names(temp) <- paste0(\"loess_\", span)   ibcbr_spans <- bind_cols(ibcbr_spans, temp) }  # Plot ibcbr_spans |>   select(date, ibcbr, starts_with(\"loess_\")) |>   pivot_longer(     cols = c(ibcbr, starts_with(\"loess_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"ibcbr\" ~ \"Original\",       method == \"loess_0.1\" ~ \"Span = 0.1 (flexible)\",       method == \"loess_0.2\" ~ \"Span = 0.2\",       method == \"loess_0.4\" ~ \"Span = 0.4\",       method == \"loess_0.7\" ~ \"Span = 0.7 (smooth)\"     )   ) |>   ggplot(aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"LOESS with Different Span Parameters\",     subtitle = \"Larger span = smoother trend\",     x = \"Date\",     y = \"Index\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"spline-smoothing-maximum-flexibility","dir":"Articles","previous_headings":"","what":"Spline Smoothing: Maximum Flexibility","title":"Advanced Trend Extraction Methods","text":"Splines provide flexible smoothing fitting piecewise polynomials:  use splines: - need maximum flexibility - Trend complex, changing curvature - don’t need explain method (’s somewhat “black box”)","code":"# Apply spline smoothing vehicles_spline <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = c(\"spline\", \"loess\", \"hp\")   )  # Plot vehicles_spline |>   select(date, vehicles, starts_with(\"trend_\")) |>   pivot_longer(     cols = c(vehicles, starts_with(\"trend_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"vehicles\" ~ \"Original\",       method == \"trend_spline\" ~ \"Spline\",       method == \"trend_loess\" ~ \"LOESS\",       method == \"trend_hp\" ~ \"HP Filter\"     )   ) |>   ggplot(aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Spline Smoothing vs Other Methods\",     subtitle = \"Splines are very flexible\",     x = \"Date\",     y = \"Production (thousands)\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"combining-multiple-methods","dir":"Articles","previous_headings":"","what":"Combining Multiple Methods","title":"Advanced Trend Extraction Methods","text":"Often best approach compare several methods:  median trend can robust single method.","code":"# Apply many methods to the same data multi_method <- ibcbr_recent |>   augment_trends(     value_col = \"ibcbr\",     methods = c(\"hp\", \"stl\", \"kalman\", \"loess\", \"spline\")   )  # Calculate median trend across methods multi_method <- multi_method |>   rowwise() |>   mutate(     trend_median = median(c(trend_hp, trend_stl, trend_kalman,                            trend_loess, trend_spline), na.rm = TRUE)   ) |>   ungroup()  # Plot multi_method |>   select(date, ibcbr, starts_with(\"trend_\")) |>   pivot_longer(     cols = c(ibcbr, starts_with(\"trend_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   filter(!is.na(value)) |>   mutate(     method = case_when(       method == \"ibcbr\" ~ \"Original\",       method == \"trend_hp\" ~ \"HP\",       method == \"trend_stl\" ~ \"STL\",       method == \"trend_kalman\" ~ \"Kalman\",       method == \"trend_loess\" ~ \"LOESS\",       method == \"trend_spline\" ~ \"Spline\",       method == \"trend_median\" ~ \"Median of All\"     ),     is_median = method == \"Median of All\"   ) |>   ggplot(aes(x = date, y = value, color = method, linewidth = is_median)) +   geom_line() +   scale_linewidth_manual(values = c(0.6, 1.5), guide = \"none\") +   labs(     title = \"Ensemble of Trend Methods\",     subtitle = \"Median trend (thick line) combines multiple methods\",     x = \"Date\",     y = \"Index\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"practical-application-end-of-sample-problem","dir":"Articles","previous_headings":"","what":"Practical Application: End-of-Sample Problem","title":"Advanced Trend Extraction Methods","text":"common issue trend extraction behavior end sample (recent data). Different methods handle differently:  Key insights: - MA NAs end (needs future data) - HP, Kalman, LOESS provide estimates end - Kalman filter often handles end--sample best","code":"# Focus on the last year of data recent_12m <- ibcbr |>   slice_tail(n = 24)  # Apply multiple methods end_sample <- recent_12m |>   augment_trends(     value_col = \"ibcbr\",     methods = c(\"hp\", \"kalman\", \"loess\", \"ma\"),     window = 6   )  # Highlight the last 6 observations end_sample <- end_sample |>   mutate(recent = row_number() > 18)  # Plot with emphasis on recent period end_sample |>   select(date, ibcbr, starts_with(\"trend_\"), recent) |>   pivot_longer(     cols = c(ibcbr, starts_with(\"trend_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   filter(!is.na(value)) |>   mutate(     method = case_when(       method == \"ibcbr\" ~ \"Original\",       method == \"trend_hp\" ~ \"HP Filter\",       method == \"trend_kalman\" ~ \"Kalman\",       method == \"trend_loess\" ~ \"LOESS\",       method == \"trend_ma\" ~ \"Moving Average\"     )   ) |>   ggplot(aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.9) +   geom_vline(xintercept = end_sample$date[19], linetype = \"dashed\", alpha = 0.5) +   annotate(\"text\", x = end_sample$date[19], y = max(end_sample$ibcbr, na.rm = TRUE),            label = \"Last 6 months →\", hjust = -0.1, vjust = 1) +   labs(     title = \"End-of-Sample Behavior\",     subtitle = \"Different methods behave differently at the end of the series\",     x = \"Date\",     y = \"Index\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"decision-tree","dir":"Articles","previous_headings":"Method Selection Guide","what":"Decision Tree","title":"Advanced Trend Extraction Methods","text":"Yes → Use STL → Continue step 2 Yes → Use Savitzky-Golay LOESS → Continue step 3 Yes → Use HP filter (see economic-filters vignette) → Continue step 4 Yes → Use LOESS Spline → Continue step 5 Yes → Use Kalman filter → Use Moving Average HP filter","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"parameter-quick-reference","dir":"Articles","previous_headings":"Method Selection Guide","what":"Parameter Quick Reference","title":"Advanced Trend Extraction Methods","text":"STL: Kalman: Savitzky-Golay: LOESS: Spline:","code":"# Default works well for most seasonal data data |> augment_trends(value_col = \"value\", methods = \"stl\")  # Adjust window for seasonal component data |> augment_trends(   value_col = \"value\",   methods = \"stl\",   window = 13  # Must be odd ) # Light smoothing data |> augment_trends(value_col = \"value\", methods = \"kalman\", smoothing = 0.5)  # Heavy smoothing data |> augment_trends(value_col = \"value\", methods = \"kalman\", smoothing = 5.0) # Standard setup data |> augment_trends(   value_col = \"value\",   methods = \"sg\",   window = 9,  # Must be odd   params = list(sg_poly_order = 3) ) # Flexible (less smooth) data |> augment_trends(value_col = \"value\", methods = \"loess\", smoothing = 0.15)  # Balanced data |> augment_trends(value_col = \"value\", methods = \"loess\", smoothing = 0.3)  # Smooth data |> augment_trends(value_col = \"value\", methods = \"loess\", smoothing = 0.6) # Default usually works well data |> augment_trends(value_col = \"value\", methods = \"spline\")"},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"pitfall-1-using-stl-on-non-seasonal-data","dir":"Articles","previous_headings":"Common Pitfalls","what":"Pitfall 1: Using STL on Non-Seasonal Data","title":"Advanced Trend Extraction Methods","text":"Problem: STL fails gives weird results Solution: Check data actually seasonality. Use ACF plot visual inspection.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"pitfall-2-loess-too-flexible","dir":"Articles","previous_headings":"Common Pitfalls","what":"Pitfall 2: LOESS Too Flexible","title":"Advanced Trend Extraction Methods","text":"Problem: Trend tracks data closely, includes noise Solution: Increase span parameter (try 0.3-0.5 instead 0.1-0.2)","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"pitfall-3-kalman-divergence","dir":"Articles","previous_headings":"Common Pitfalls","what":"Pitfall 3: Kalman Divergence","title":"Advanced Trend Extraction Methods","text":"Problem: Kalman filter produces unrealistic trends Solution: Increase smoothing parameter check data outliers","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"pitfall-4-overfitting-with-splines","dir":"Articles","previous_headings":"Common Pitfalls","what":"Pitfall 4: Overfitting with Splines","title":"Advanced Trend Extraction Methods","text":"Problem: Spline trend wiggly Solution: Splines flexible - sometimes simpler methods better","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Advanced Trend Extraction Methods","text":"Advanced methods provide powerful alternatives standard approaches: STL: go-method seasonal data Kalman: Statistically optimal, great real-time filtering Savitzky-Golay: Preserves local features better MA LOESS: Flexible, data-adaptive smoothing Spline: Maximum flexibility need Best practices: - Start simple (MA HP) trying advanced methods - Compare multiple methods ensure robustness - Visualize results - don’t just trust numbers - Consider trade-smoothness responsiveness","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Advanced Trend Extraction Methods","text":"basic methods: See “Getting Started” vignette moving averages: See “Moving Averages” vignette business cycles: See “Economic Filters” vignette STL details: ?stats::stl Kalman filtering: ?dlm::dlmSmooth","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/advanced-methods.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Advanced Trend Extraction Methods","text":"Cleveland, R. B., Cleveland, W. S., McRae, J. E., & Terpenning, . (1990). STL: seasonal-trend decomposition. Journal Official Statistics, 6(1), 3-73. Kalman, R. E. (1960). new approach linear filtering prediction problems. Journal Basic Engineering, 82(1), 35-45. Cleveland, W. S. (1979). Robust locally weighted regression smoothing scatterplots. Journal American Statistical Association, 74(368), 829-836. Savitzky, ., & Golay, M. J. (1964). Smoothing differentiation data simplified least squares procedures. Analytical Chemistry, 36(8), 1627-1639.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Economic Filters for Business Cycle Analysis","text":"Economic filters specialized methods designed business cycle analysis - extracting trends measuring cyclical fluctuations macroeconomic data. Unlike simple moving averages, methods based economic theory business cycles behave. vignette covers important economic filters: Hodrick-Prescott (HP) filter: standard macroeconomics Baxter-King (BK) filter: Isolates specific business cycle frequencies Christiano-Fitzgerald (CF) filter: Asymmetric bandpass filter Hamilton filter: Recent alternative HP filter","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"when-to-use-economic-filters","dir":"Articles","previous_headings":"Introduction","what":"When to Use Economic Filters","title":"Economic Filters for Business Cycle Analysis","text":"Use economic filters : - Analyzing GDP, industrial production, macroeconomic aggregates - Measuring business cycles output gaps - Decomposing series trend cycle components - Following standard economic research practices less suitable : - High-frequency financial data (use EWMA methods) - Data irregular patterns - Short time series (need least 30-40 observations)","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"the-hodrick-prescott-filter-the-standard-approach","dir":"Articles","previous_headings":"","what":"The Hodrick-Prescott Filter: The Standard Approach","title":"Economic Filters for Business Cycle Analysis","text":"HP filter widely used method macroeconomics. finds smooth trend minimizing fit data variability trend.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"basic-example-with-quarterly-data","dir":"Articles","previous_headings":"The Hodrick-Prescott Filter: The Standard Approach","what":"Basic Example with Quarterly Data","title":"Economic Filters for Business Cycle Analysis","text":"Let’s start quarterly GDP construction data: Now visualize trend cyclical component (gap):   cyclical component shows periods construction sector trend (booms) trend (recessions).","code":"# Apply HP filter to quarterly data gdp_hp <- gdp_construction |>   augment_trends(     value_col = \"gdp_construction\",     methods = \"hp\"   )  # View results head(gdp_hp) #> # A tibble: 6 × 3 #>   date       gdp_construction trend_hp #>   <date>                <dbl>    <dbl> #> 1 1995-01-01            100       101. #> 2 1995-04-01            100       101. #> 3 1995-07-01            100       102. #> 4 1995-10-01            100       103. #> 5 1996-01-01             97.8     103. #> 6 1996-04-01            101.      104. # Calculate the cycle (deviation from trend) gdp_hp <- gdp_hp |>   mutate(cycle = gdp_construction - trend_hp)  # Plot 1: Trend vs Original p1 <- gdp_hp |>   select(date, gdp_construction, trend_hp) |>   pivot_longer(cols = c(gdp_construction, trend_hp), names_to = \"series\") |>   mutate(series = ifelse(series == \"gdp_construction\", \"Original\", \"HP Trend\")) |>   ggplot(aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.9) +   labs(     title = \"GDP Construction: Original vs HP Trend\",     subtitle = \"Quarterly data with standard HP filter (λ=1600)\",     x = NULL,     y = \"Index\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  # Plot 2: Cyclical component p2 <- gdp_hp |>   ggplot(aes(x = date, y = cycle)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(linewidth = 0.9, color = \"#0072B2\") +   labs(     title = \"Cyclical Component (Output Gap)\",     subtitle = \"Deviations from HP trend\",     x = \"Date\",     y = \"Gap (index points)\",     color = NULL   ) +   theme_minimal()  print(p1) print(p2)"},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"the-lambda-parameter","dir":"Articles","previous_headings":"The Hodrick-Prescott Filter: The Standard Approach","what":"The Lambda Parameter","title":"Economic Filters for Business Cycle Analysis","text":"HP filter one key parameter: lambda (λ), controls smoothness: Higher λ: Smoother trend, captures long-term movements Lower λ: flexible trend, follows data closely Standard values: - Quarterly data: λ = 1600 (Hodrick-Prescott’s original recommendation) - Monthly data: λ = 14400 (adjusted frequency) - Annual data: λ = 100 Let’s see effect different lambda values:  Recommendation: Use standard values (1600 quarterly, 14400 monthly) unless specific reason change .","code":"# Test different lambda values on quarterly data lambdas <- c(400, 1600, 6400)  gdp_lambdas <- gdp_construction  for (lambda in lambdas) {   temp <- gdp_construction |>     augment_trends(       value_col = \"gdp_construction\",       methods = \"hp\",       smoothing = lambda     ) |>     select(trend_hp)    names(temp) <- paste0(\"hp_\", lambda)   gdp_lambdas <- bind_cols(gdp_lambdas, temp) }  # Plot gdp_lambdas |>   select(date, gdp_construction, starts_with(\"hp_\")) |>   pivot_longer(     cols = c(gdp_construction, starts_with(\"hp_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"gdp_construction\" ~ \"Original\",       method == \"hp_400\" ~ \"λ = 400 (flexible)\",       method == \"hp_1600\" ~ \"λ = 1600 (standard)\",       method == \"hp_6400\" ~ \"λ = 6400 (very smooth)\"     )   ) |>   ggplot(aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"HP Filter with Different Lambda Values\",     subtitle = \"Quarterly GDP construction data\",     x = \"Date\",     y = \"Index\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"hp-filter-on-monthly-data","dir":"Articles","previous_headings":"The Hodrick-Prescott Filter: The Standard Approach","what":"HP Filter on Monthly Data","title":"Economic Filters for Business Cycle Analysis","text":"HP filter works exactly way monthly data, uses different default lambda:   cyclical component clearly shows economic contraction pandemic subsequent recovery.","code":"# Apply HP filter to monthly IBC-Br data ibcbr_hp <- ibcbr |>   slice_tail(n = 120) |>  # Last 10 years   augment_trends(     value_col = \"ibcbr\",     methods = \"hp\"   ) |>   mutate(cycle = ibcbr - trend_hp)  # Plot trend and cycle p1 <- ibcbr_hp |>   select(date, ibcbr, trend_hp) |>   pivot_longer(cols = c(ibcbr, trend_hp), names_to = \"series\") |>   mutate(series = ifelse(series == \"ibcbr\", \"Original\", \"HP Trend\")) |>   ggplot(aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.8) +   labs(     title = \"IBC-Br Economic Activity: HP Trend\",     subtitle = \"Monthly data with λ=14400\",     x = NULL,     y = \"Index\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  p2 <- ibcbr_hp |>   ggplot(aes(x = date, y = cycle)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(linewidth = 0.8, color = \"#0072B2\") +   geom_ribbon(aes(ymin = pmin(cycle, 0), ymax = 0), alpha = 0.3, fill = \"#D55E00\") +   geom_ribbon(aes(ymin = 0, ymax = pmax(cycle, 0)), alpha = 0.3, fill = \"#009E73\") +   labs(     title = \"Business Cycle Component\",     subtitle = \"Green = above trend (expansion), Red = below trend (contraction)\",     x = \"Date\",     y = \"Gap (index points)\"   ) +   theme_minimal()  print(p1) print(p2)"},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"bandpass-filters-isolating-business-cycles","dir":"Articles","previous_headings":"","what":"Bandpass Filters: Isolating Business Cycles","title":"Economic Filters for Business Cycle Analysis","text":"HP filter separates trend cycle, bandpass filters specifically isolate fluctuations within certain frequency range. useful want focus “true” business cycles (typically 6-32 quarters 1.5-8 years).","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"baxter-king-filter","dir":"Articles","previous_headings":"Bandpass Filters: Isolating Business Cycles","what":"Baxter-King Filter","title":"Economic Filters for Business Cycle Analysis","text":"BK filter isolates fluctuations lower upper period bound:  Note: BK filter loses observations beginning end sample. price isolating specific frequencies.","code":"# Apply BK filter to quarterly GDP data # Isolate cycles between 6 and 32 quarters (standard business cycle range) gdp_bk <- gdp_construction |>   augment_trends(     value_col = \"gdp_construction\",     methods = \"bk\",     band = c(6, 32)  # Business cycle frequencies   )  # The BK filter returns the cycle, not the trend # So we need to calculate the trend as: trend = original - cycle gdp_bk <- gdp_bk |>   mutate(     cycle_bk = trend_bk,  # Rename for clarity     trend_bk_calc = gdp_construction - cycle_bk   )  # Plot the cycle gdp_bk |>   filter(!is.na(cycle_bk)) |>  # BK loses observations at edges   ggplot(aes(x = date, y = cycle_bk)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(linewidth = 0.9, color = \"#0072B2\") +   geom_ribbon(aes(ymin = pmin(cycle_bk, 0), ymax = 0), alpha = 0.3, fill = \"#D55E00\") +   geom_ribbon(aes(ymin = 0, ymax = pmax(cycle_bk, 0)), alpha = 0.3, fill = \"#009E73\") +   labs(     title = \"Baxter-King Business Cycle\",     subtitle = \"Isolates fluctuations between 6-32 quarters\",     x = \"Date\",     y = \"Cycle (index points)\"   ) +   theme_minimal()"},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"christiano-fitzgerald-filter","dir":"Articles","previous_headings":"Bandpass Filters: Isolating Business Cycles","what":"Christiano-Fitzgerald Filter","title":"Economic Filters for Business Cycle Analysis","text":"CF filter similar BK uses available data efficiently (asymmetric filter):  CF filter produces similar results BK uses observations (fewer NAs edges).","code":"# Apply CF filter gdp_cf <- gdp_construction |>   augment_trends(     value_col = \"gdp_construction\",     methods = \"cf\",     band = c(6, 32)   ) |>   mutate(     cycle_cf = trend_cf,     trend_cf_calc = gdp_construction - cycle_cf   )  # Compare BK and CF cycles comparison <- bind_rows(   gdp_bk |>     select(date, cycle = cycle_bk) |>     mutate(method = \"Baxter-King\"),    gdp_cf |>     select(date, cycle = cycle_cf) |>     mutate(method = \"Christiano-Fitzgerald\") )  comparison |>   filter(!is.na(cycle)) |>   ggplot(aes(x = date, y = cycle, color = method)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(linewidth = 0.9) +   labs(     title = \"Comparing BK and CF Filters\",     subtitle = \"Both isolate 6-32 quarter business cycles\",     x = \"Date\",     y = \"Cycle (index points)\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"choosing-band-parameters","dir":"Articles","previous_headings":"Bandpass Filters: Isolating Business Cycles","what":"Choosing Band Parameters","title":"Economic Filters for Business Cycle Analysis","text":"band parameter c(low, high) defines cycle period range: quarterly data: - Standard business cycles: c(6, 32) (1.5 8 years) - Short cycles: c(4, 12) (1 3 years) - Long cycles: c(8, 40) (2 10 years) monthly data: - Standard business cycles: c(18, 96) (1.5 8 years) - Short cycles: c(12, 36) (1 3 years)  Different frequency bands highlight different cyclical patterns data.","code":"# Try different frequency bands on monthly vehicle data vehicles_recent <- vehicles |>   slice_tail(n = 120)  # Short cycles (1-2 years) vehicles_short <- vehicles_recent |>   augment_trends(value_col = \"vehicles\", methods = \"cf\", band = c(12, 24)) |>   select(date, vehicles, cycle_short = trend_cf)  # Medium cycles (1.5-4 years) vehicles_medium <- vehicles_recent |>   augment_trends(value_col = \"vehicles\", methods = \"cf\", band = c(18, 48)) |>   select(cycle_medium = trend_cf)  # Combine vehicles_bands <- bind_cols(vehicles_short, vehicles_medium) |>   select(date, cycle_short, cycle_medium) |>   pivot_longer(cols = starts_with(\"cycle\"), names_to = \"band\", values_to = \"cycle\") |>   mutate(     band = case_when(       band == \"cycle_short\" ~ \"Short (12-24 months)\",       band == \"cycle_medium\" ~ \"Medium (18-48 months)\"     )   )  vehicles_bands |>   filter(!is.na(cycle)) |>   ggplot(aes(x = date, y = cycle, color = band)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(linewidth = 0.9) +   labs(     title = \"CF Filter with Different Frequency Bands\",     subtitle = \"Vehicle production - different cycle definitions\",     x = \"Date\",     y = \"Cycle\",     color = \"Frequency Band\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"the-hamilton-filter-a-modern-alternative","dir":"Articles","previous_headings":"","what":"The Hamilton Filter: A Modern Alternative","title":"Economic Filters for Business Cycle Analysis","text":"James Hamilton (2018) proposed alternative HP filter based regression. avoids statistical issues HP filter gaining popularity.  Hamilton filter often produces similar results HP can differ turning points end sample.","code":"# Apply Hamilton filter to quarterly GDP gdp_hamilton <- gdp_construction |>   augment_trends(     value_col = \"gdp_construction\",     methods = \"hamilton\"   ) |>   mutate(cycle_hamilton = gdp_construction - trend_hamilton)  # Compare HP and Hamilton comparison_hp_ham <- bind_rows(   gdp_hp |>     select(date, cycle) |>     mutate(method = \"HP Filter\"),    gdp_hamilton |>     select(date, cycle = cycle_hamilton) |>     mutate(method = \"Hamilton Filter\") )  comparison_hp_ham |>   filter(!is.na(cycle)) |>   ggplot(aes(x = date, y = cycle, color = method)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(linewidth = 0.9) +   labs(     title = \"HP Filter vs Hamilton Filter\",     subtitle = \"Both estimate business cycle deviations\",     x = \"Date\",     y = \"Cycle (output gap)\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"example-1-identifying-recessions","dir":"Articles","previous_headings":"Practical Business Cycle Analysis","what":"Example 1: Identifying Recessions","title":"Economic Filters for Business Cycle Analysis","text":"Economic filters help identify recessions - periods economy operates trend:","code":"# Use HP filter cycle to identify recession periods ibcbr_cycles <- ibcbr |>   slice_tail(n = 120) |>   augment_trends(value_col = \"ibcbr\", methods = \"hp\") |>   mutate(     cycle = ibcbr - trend_hp,     is_recession = cycle < 0  # Below trend   )  # Plot with recession shading ibcbr_cycles |>   ggplot(aes(x = date, y = cycle)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_ribbon(     data = filter(ibcbr_cycles, is_recession),     aes(ymin = -Inf, ymax = Inf),     alpha = 0.2,     fill = \"gray70\"   ) +   geom_line(linewidth = 0.9, color = \"#0072B2\") +   labs(     title = \"IBC-Br Business Cycles and Recessions\",     subtitle = \"Gray shading indicates periods below trend\",     x = \"Date\",     y = \"Output Gap (index points)\"   ) +   theme_minimal()"},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"example-2-output-gap-analysis","dir":"Articles","previous_headings":"Practical Business Cycle Analysis","what":"Example 2: Output Gap Analysis","title":"Economic Filters for Business Cycle Analysis","text":"output gap (cycle component) crucial monetary policy decisions:  Positive gaps (green) suggest economy “overheating,” negative gaps (red) indicate slack capacity.","code":"# Calculate output gap as percentage of trend ibcbr_gap <- ibcbr |>   slice_tail(n = 120) |>   augment_trends(value_col = \"ibcbr\", methods = \"hp\") |>   mutate(     gap_pct = ((ibcbr - trend_hp) / trend_hp) * 100   )  # Plot output gap ibcbr_gap |>   ggplot(aes(x = date, y = gap_pct)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_hline(yintercept = c(-2, 2), linetype = \"dotted\", color = \"gray60\", alpha = 0.7) +   geom_line(linewidth = 0.9, color = \"#0072B2\") +   geom_ribbon(aes(ymin = pmin(gap_pct, 0), ymax = 0), alpha = 0.3, fill = \"#D55E00\") +   geom_ribbon(aes(ymin = 0, ymax = pmax(gap_pct, 0)), alpha = 0.3, fill = \"#009E73\") +   labs(     title = \"Output Gap: Economic Activity vs Trend\",     subtitle = \"Gap as percentage of trend (dotted lines = ±2%)\",     x = \"Date\",     y = \"Gap (%)\"   ) +   theme_minimal()"},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"example-3-comparing-multiple-indicators","dir":"Articles","previous_headings":"Practical Business Cycle Analysis","what":"Example 3: Comparing Multiple Indicators","title":"Economic Filters for Business Cycle Analysis","text":"Let’s compare business cycles across different sectors:  reveals sectors less cyclical whether move together.","code":"# Get recent data for multiple series recent_gdp <- gdp_construction |>   slice_tail(n = 40) |>   augment_trends(value_col = \"gdp_construction\", methods = \"hp\") |>   mutate(     cycle = ((gdp_construction - trend_hp) / trend_hp) * 100,     indicator = \"GDP Construction\"   ) |>   select(date, indicator, cycle)  recent_vehicles <- vehicles |>   slice_tail(n = 120) |>   augment_trends(value_col = \"vehicles\", methods = \"hp\") |>   mutate(     cycle = ((vehicles - trend_hp) / trend_hp) * 100,     indicator = \"Vehicle Production\"   ) |>   select(date, indicator, cycle)  recent_activity <- ibcbr |>   slice_tail(n = 120) |>   augment_trends(value_col = \"ibcbr\", methods = \"hp\") |>   mutate(     cycle = ((ibcbr - trend_hp) / trend_hp) * 100,     indicator = \"Economic Activity\"   ) |>   select(date, indicator, cycle)  # Combine and plot bind_rows(recent_gdp, recent_vehicles, recent_activity) |>   ggplot(aes(x = date, y = cycle, color = indicator)) +   geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +   geom_line(linewidth = 0.9) +   labs(     title = \"Business Cycles Across Economic Sectors\",     subtitle = \"All series show output gaps as % of HP trend\",     x = \"Date\",     y = \"Output Gap (%)\",     color = \"Indicator\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"choosing-the-right-economic-filter","dir":"Articles","previous_headings":"","what":"Choosing the Right Economic Filter","title":"Economic Filters for Business Cycle Analysis","text":"’s practical decision guide:","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"basic-questions","dir":"Articles","previous_headings":"Choosing the Right Economic Filter","what":"Basic Questions","title":"Economic Filters for Business Cycle Analysis","text":"→ Use HP filter (λ=1600 quarterly, λ=14400 monthly) → Use BK CF filter band = c(6, 32) quarterly c(18, 96) monthly → Try Hamilton filter → Use HP Hamilton (avoid BK loses observations) → Consider Hamilton filter (HP still standard)","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"parameter-quick-reference","dir":"Articles","previous_headings":"Choosing the Right Economic Filter","what":"Parameter Quick Reference","title":"Economic Filters for Business Cycle Analysis","text":"HP Filter: Bandpass Filters: Hamilton Filter:","code":"# Quarterly data (standard) data |> augment_trends(value_col = \"value\", methods = \"hp\", smoothing = 1600)  # Monthly data (standard) data |> augment_trends(value_col = \"value\", methods = \"hp\", smoothing = 14400)  # More flexible trend (lower lambda) data |> augment_trends(value_col = \"value\", methods = \"hp\", smoothing = 400)  # Smoother trend (higher lambda) data |> augment_trends(value_col = \"value\", methods = \"hp\", smoothing = 6400) # Quarterly: standard business cycles data |> augment_trends(value_col = \"value\", methods = \"bk\", band = c(6, 32)) data |> augment_trends(value_col = \"value\", methods = \"cf\", band = c(6, 32))  # Monthly: standard business cycles data |> augment_trends(value_col = \"value\", methods = \"cf\", band = c(18, 96)) # Default parameters work well for most cases data |> augment_trends(value_col = \"value\", methods = \"hamilton\")"},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"issue-1-trend-too-smooth-or-too-wiggly","dir":"Articles","previous_headings":"Common Issues and Solutions","what":"Issue 1: Trend too smooth or too wiggly","title":"Economic Filters for Business Cycle Analysis","text":"Problem: HP filter trend doesn’t look right Solution: Adjust lambda - increase smoother, decrease flexible","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"issue-2-missing-values-at-edges-bk-filter","dir":"Articles","previous_headings":"Common Issues and Solutions","what":"Issue 2: Missing values at edges (BK filter)","title":"Economic Filters for Business Cycle Analysis","text":"Problem: BK filter returns many NAs Solution: Use CF filter instead, accept loss observations","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"issue-3-different-methods-give-different-results","dir":"Articles","previous_headings":"Common Issues and Solutions","what":"Issue 3: Different methods give different results","title":"Economic Filters for Business Cycle Analysis","text":"Problem: HP Hamilton show different turning points Solution: normal - method “correct.” Use economic judgment try multiple methods","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"issue-4-cycle-doesnt-match-known-recessions","dir":"Articles","previous_headings":"Common Issues and Solutions","what":"Issue 4: Cycle doesn’t match known recessions","title":"Economic Filters for Business Cycle Analysis","text":"Problem: Filter doesn’t identify known economic downturns Solution: Check data quality, try different parameters, use domain knowledge adjust","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Economic Filters for Business Cycle Analysis","text":"Economic filters powerful tools business cycle analysis: HP filter: Use default trend-cycle decomposition (λ=1600 quarterly, λ=14400 monthly) BK/CF filters: Use need isolate specific business cycle frequencies Hamilton filter: Consider modern alternative HP Key insights: - output gap (cycle) measures far economy trend - Negative gaps indicate recession/slack, positive gaps indicate overheating - Different sectors can different cyclical patterns - method perfect - use economic judgment alongside statistical tools","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Economic Filters for Business Cycle Analysis","text":"general introduction: See “Getting Started” vignette moving averages: See “Moving Averages” vignette advanced decomposition: See “Advanced Methods” vignette STL Kalman filters","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/economic-filters.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Economic Filters for Business Cycle Analysis","text":"Hodrick, R. J., & Prescott, E. C. (1997). Postwar U.S. business cycles: empirical investigation. Journal Money, Credit Banking, 1-16. Baxter, M., & King, R. G. (1999). Measuring business cycles: Approximate band-pass filters. Review Economics Statistics, 81(4), 575-593. Christiano, L. J., & Fitzgerald, T. J. (2003). band pass filter. International Economic Review, 44(2), 435-465. Hamilton, J. D. (2018). never use Hodrick-Prescott filter. Review Economics Statistics, 100(5), 831-843.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Moving Averages for Trend Analysis","text":"Moving averages one intuitive widely-used tools extracting trends time series data. basic idea simple: average nearby observations smooth random fluctuations. vignette explores different types moving averages available trendseries, use one, choose appropriate parameters.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"when-to-use-moving-averages","dir":"Articles","previous_headings":"Introduction","what":"When to Use Moving Averages","title":"Moving Averages for Trend Analysis","text":"Moving averages work well : - want simple, interpretable trend - data short-term noise want filter - ’re preliminary exploratory analysis - need trend ’s easy explain non-technical audiences ’re less suitable : - data strong seasonal patterns (use STL instead) - need preserve specific features like peaks valleys (use Savitzky-Golay) - ’re analyzing business cycles (use HP, BK, CF filters)","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"simple-moving-average-the-foundation","dir":"Articles","previous_headings":"","what":"Simple Moving Average: The Foundation","title":"Moving Averages for Trend Analysis","text":"simple moving average (MA) calculates mean last n observations. ’s easiest method understand implement.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"how-it-works","dir":"Articles","previous_headings":"Simple Moving Average: The Foundation","what":"How It Works","title":"Moving Averages for Trend Analysis","text":"12-month moving average, point average current month plus previous 11 months:","code":"MA(t) = (X(t) + X(t-1) + X(t-2) + ... + X(t-11)) / 12"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"basic-example","dir":"Articles","previous_headings":"Simple Moving Average: The Foundation","what":"Basic Example","title":"Moving Averages for Trend Analysis","text":"Let’s start vehicle production data: Let’s visualize smoothing effect:  moving average (teal/blue) clearly shows underlying trend filtering month--month noise.","code":"# Use recent data (last 5 years) vehicles_recent <- vehicles |>   slice_tail(n = 60)  # Apply 12-month moving average vehicles_ma <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 12   )  # View results head(vehicles_ma) #> # A tibble: 6 × 3 #>   date       vehicles trend_ma #>   <date>        <dbl>    <dbl> #> 1 2020-08-01   193421      NA  #> 2 2020-09-01   219033      NA  #> 3 2020-10-01   230927      NA  #> 4 2020-11-01   249104      NA  #> 5 2020-12-01   261321      NA  #> 6 2021-01-01   180904  207884. # Prepare plot data plot_data <- vehicles_ma |>   select(date, vehicles, trend_ma) |>   pivot_longer(     cols = c(vehicles, trend_ma),     names_to = \"series\",     values_to = \"value\"   ) |>   mutate(     series = ifelse(series == \"vehicles\", \"Original Data\", \"12-Month MA\")   )  # Plot ggplot(plot_data, aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.9) +   labs(     title = \"Vehicle Production: Simple Moving Average\",     subtitle = \"12-month window smooths out month-to-month variation\",     x = \"Date\",     y = \"Production (thousands of units)\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"choosing-the-right-window-size","dir":"Articles","previous_headings":"","what":"Choosing the Right Window Size","title":"Moving Averages for Trend Analysis","text":"window size (period) determines smooth trend : Small windows (3-6): responsive, track changes quickly, may include noise Medium windows (12): Balance smoothness responsiveness (one year monthly data) Large windows (24+): smooth, slow react changes Let’s compare different window sizes:  Notice 24-month MA smooth “lags” behind changes, 3-month MA tracks data closely still shows fluctuation.","code":"# Apply different window sizes windows_to_test <- c(3, 6, 12, 24)  # Start with original data vehicles_windows <- vehicles_recent  # Add each window size for (w in windows_to_test) {   temp <- vehicles_recent |>     augment_trends(value_col = \"vehicles\", methods = \"ma\", window = w) |>     select(trend_ma)    names(temp) <- paste0(\"ma_\", w, \"m\")   vehicles_windows <- bind_cols(vehicles_windows, temp) }  # Prepare for plotting plot_data <- vehicles_windows |>   select(date, vehicles, starts_with(\"ma_\")) |>   pivot_longer(     cols = c(vehicles, starts_with(\"ma_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"vehicles\" ~ \"Original\",       method == \"ma_3m\" ~ \"3-month MA\",       method == \"ma_6m\" ~ \"6-month MA\",       method == \"ma_12m\" ~ \"12-month MA\",       method == \"ma_24m\" ~ \"24-month MA\"     ),     method = factor(method, levels = c(\"Original\", \"3-month MA\", \"6-month MA\",                                        \"12-month MA\", \"24-month MA\"))   )  # Plot ggplot(plot_data, aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Effect of Window Size on Moving Average\",     subtitle = \"Larger windows = smoother trends, but slower to react\",     x = \"Date\",     y = \"Production (thousands of units)\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"window-size-guidelines","dir":"Articles","previous_headings":"Choosing the Right Window Size","what":"Window Size Guidelines","title":"Moving Averages for Trend Analysis","text":"monthly data: - Short-term analysis: 3-6 months - Medium-term trends: 12 months (annual cycle) - Long-term trends: 24-36 months quarterly data: - Short-term: 2-4 quarters - Medium-term: 4-8 quarters - Long-term: 8-12 quarters","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"understanding-alignment-center-vs-right-vs-left","dir":"Articles","previous_headings":"","what":"Understanding Alignment: Center vs Right vs Left","title":"Moving Averages for Trend Analysis","text":"Moving averages can calculated different alignments, determines observations used calculate point. critical choice affects trend’s properties NAs appear result.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"the-three-alignment-options","dir":"Articles","previous_headings":"Understanding Alignment: Center vs Right vs Left","what":"The Three Alignment Options","title":"Moving Averages for Trend Analysis","text":"common general trend extraction Produces NAs beginning end series Non-causal: uses future information Critical real-time analysis forecasting Produces NAs beginning look-ahead bias: suitable backtesting strategies Also called “trailing” “backward-looking” Rarely used practice Produces NAs end Useful specific smoothing applications","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"when-to-use-each-alignment","dir":"Articles","previous_headings":"Understanding Alignment: Center vs Right vs Left","what":"When to Use Each Alignment","title":"Moving Averages for Trend Analysis","text":"Use center alignment : - historical analysis data available - want smoothest possible trend - symmetric window makes sense application Use right alignment : - Building forecasting models (avoid look-ahead bias) - Backtesting trading strategies economic indicators - Analyzing data real-time (can’t use future data) - Need causal filters time series econometrics Use left alignment : - Specific smoothing applications need forward-looking averages - rarely used economic analysis","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"visualizing-different-alignments","dir":"Articles","previous_headings":"Understanding Alignment: Center vs Right vs Left","what":"Visualizing Different Alignments","title":"Moving Averages for Trend Analysis","text":"Let’s compare three alignments using vehicle production data:  Notice : - Center smoothest symmetric - Right lags behind center (uses past data) - Left leads ahead center (uses future data)","code":"# Apply 12-month moving average with different alignments vehicles_align <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 12,     align = \"center\"   ) |>   rename(trend_center = trend_ma)  # Add right alignment vehicles_align <- vehicles_align |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 12,     align = \"right\"   ) |>   rename(trend_right = trend_ma)  # Add left alignment vehicles_align <- vehicles_align |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 12,     align = \"left\"   ) |>   rename(trend_left = trend_ma)  # Prepare for plotting plot_data <- vehicles_align |>   select(date, vehicles, starts_with(\"trend_\")) |>   pivot_longer(     cols = starts_with(\"trend_\"),     names_to = \"alignment\",     values_to = \"value\"   ) |>   mutate(     alignment = case_when(       alignment == \"trend_center\" ~ \"Center (default)\",       alignment == \"trend_right\" ~ \"Right (causal)\",       alignment == \"trend_left\" ~ \"Left (anti-causal)\"     ),     alignment = factor(       alignment,       levels = c(\"Center (default)\", \"Right (causal)\", \"Left (anti-causal)\")     )   )  # Plot ggplot(plot_data, aes(x = date, y = value, color = alignment)) +   geom_line(linewidth = 0.9, alpha = 0.8) +   labs(     title = \"Moving Average Alignment Comparison\",     subtitle = \"12-month window with different alignments\",     x = \"Date\",     y = \"Production (thousands of units)\",     color = \"Alignment\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"practical-example-real-time-forecasting","dir":"Articles","previous_headings":"Understanding Alignment: Center vs Right vs Left","what":"Practical Example: Real-Time Forecasting","title":"Moving Averages for Trend Analysis","text":"real-time analysis, right alignment essential. Let’s simulate forecaster seen different points time: right alignment, trend available immediately new data arrives, making suitable real-time monitoring dashboards nowcasting applications.","code":"# Simulate real-time analysis: what would we see in Dec 2022? cutoff_date <- as.Date(\"2022-12-31\")  # Data available up to cutoff historical_data <- vehicles |>   filter(date <= cutoff_date)  # Apply right-aligned MA (what we could compute in real-time) realtime_ma <- historical_data |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 12,     align = \"right\"   )  # Show last 6 months of trend realtime_ma |>   slice_tail(n = 6) |>   select(date, vehicles, trend_ma) #> # A tibble: 6 × 3 #>   date       vehicles trend_ma #>   <date>        <dbl>    <dbl> #> 1 2022-07-01   201167  178954. #> 2 2022-08-01   231304  183321. #> 3 2022-09-01   197346  186700. #> 4 2022-10-01   201632  189321. #> 5 2022-11-01   217446  192748. #> 6 2022-12-01   218390  192660."},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"alignment-and-missing-values","dir":"Articles","previous_headings":"Understanding Alignment: Center vs Right vs Left","what":"Alignment and Missing Values","title":"Moving Averages for Trend Analysis","text":"Different alignments produce NAs different locations: 12-month window: - Center: ~6 NAs start ~6 end - Right: ~11 NAs start, none end (can compute trend present) - Left: None start, ~11 NAs end","code":"# Check NA pattern for each alignment na_summary <- vehicles_align |>   summarise(     center_nas = sum(is.na(trend_center)),     right_nas = sum(is.na(trend_right)),     left_nas = sum(is.na(trend_left))   )  na_summary #> # A tibble: 1 × 3 #>   center_nas right_nas left_nas #>        <int>     <int>    <int> #> 1         11        11       11"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"exponentially-weighted-moving-average-ewma","dir":"Articles","previous_headings":"","what":"Exponentially Weighted Moving Average (EWMA)","title":"Moving Averages for Trend Analysis","text":"Unlike simple MA weights observations equally, EWMA gives weight recent observations. makes responsive recent changes.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"how-it-works-1","dir":"Articles","previous_headings":"Exponentially Weighted Moving Average (EWMA)","what":"How It Works","title":"Moving Averages for Trend Analysis","text":"EWMA uses smoothing parameter α (alpha) 0 1: Higher α (e.g., 0.7): responsive recent data Lower α (e.g., 0.1): Smoother, similar long-window MA","code":"EWMA(t) = α × X(t) + (1 - α) × EWMA(t-1)"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"comparing-ma-and-ewma","dir":"Articles","previous_headings":"Exponentially Weighted Moving Average (EWMA)","what":"Comparing MA and EWMA","title":"Moving Averages for Trend Analysis","text":"","code":"# Apply both methods separately (EWMA cannot use both window and smoothing) # First: MA with window parameter vehicles_ma <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 12   )  # Second: EWMA with smoothing (alpha) parameter vehicles_ewma <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = \"ewma\",     smoothing = 0.3   )  # Combine the results vehicles_ma_ewma <- vehicles_recent |>   left_join(     select(vehicles_ma, date, trend_ma),     by = \"date\"   ) |>   left_join(     select(vehicles_ewma, date, trend_ewma),     by = \"date\"   )  # Prepare for plotting plot_data <- vehicles_ma_ewma |>   select(date, vehicles, trend_ma, trend_ewma) |>   pivot_longer(     cols = c(vehicles, trend_ma, trend_ewma),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"vehicles\" ~ \"Original\",       method == \"trend_ma\" ~ \"12-month MA\",       method == \"trend_ewma\" ~ \"EWMA (α=0.3)\"     )   )  # Plot ggplot(plot_data, aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.9) +   labs(     title = \"Simple MA vs EWMA\",     subtitle = \"EWMA emphasizes recent observations more than simple MA\",     x = \"Date\",     y = \"Production (thousands of units)\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"choosing-alpha-for-ewma","dir":"Articles","previous_headings":"Exponentially Weighted Moving Average (EWMA)","what":"Choosing Alpha for EWMA","title":"Moving Averages for Trend Analysis","text":"Let’s see different alpha values affect trend:  Guidelines alpha: - Smooth trend: α = 0.1 0.2 - Balanced: α = 0.3 0.4 - Responsive: α = 0.5 0.7 - responsive: α = 0.8+","code":"# Test different alpha values alphas <- c(0.1, 0.3, 0.5, 0.8)  vehicles_alphas <- vehicles_recent  for (a in alphas) {   temp <- vehicles_recent |>     augment_trends(value_col = \"vehicles\", methods = \"ewma\", smoothing = a) |>     select(trend_ewma)    names(temp) <- paste0(\"ewma_\", a)   vehicles_alphas <- bind_cols(vehicles_alphas, temp) }  # Plot plot_data <- vehicles_alphas |>   select(date, vehicles, starts_with(\"ewma_\")) |>   pivot_longer(     cols = c(vehicles, starts_with(\"ewma_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"vehicles\" ~ \"Original\",       method == \"ewma_0.1\" ~ \"α = 0.1 (smooth)\",       method == \"ewma_0.3\" ~ \"α = 0.3\",       method == \"ewma_0.5\" ~ \"α = 0.5\",       method == \"ewma_0.8\" ~ \"α = 0.8 (responsive)\"     )   )  ggplot(plot_data, aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"EWMA with Different Alpha Values\",     subtitle = \"Higher alpha = more weight on recent data\",     x = \"Date\",     y = \"Production (thousands of units)\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"advanced-moving-averages","dir":"Articles","previous_headings":"","what":"Advanced Moving Averages","title":"Moving Averages for Trend Analysis","text":"trendseries package includes several advanced MA methods designed reduce lag maintaining smoothness.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"comparing-advanced-methods","dir":"Articles","previous_headings":"Advanced Moving Averages","what":"Comparing Advanced Methods","title":"Moving Averages for Trend Analysis","text":"","code":"# Apply multiple advanced MA methods # Note: EWMA uses smoothing, other methods use window # Apply window-based methods vehicles_window_methods <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = c(\"ma\", \"wma\", \"zlema\"),     window = 12   )  # Apply EWMA with smoothing parameter vehicles_ewma_method <- vehicles_recent |>   augment_trends(     value_col = \"vehicles\",     methods = \"ewma\",     smoothing = 0.3   )  # Combine results vehicles_advanced <- vehicles_recent |>   left_join(     select(vehicles_window_methods, date, starts_with(\"trend_\")),     by = \"date\"   ) |>   left_join(     select(vehicles_ewma_method, date, trend_ewma),     by = \"date\"   )  # Prepare for plotting plot_data <- vehicles_advanced |>   select(date, vehicles, starts_with(\"trend_\")) |>   pivot_longer(     cols = c(vehicles, starts_with(\"trend_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"vehicles\" ~ \"Original\",       method == \"trend_ma\" ~ \"Simple MA\",       method == \"trend_ewma\" ~ \"EWMA\",       method == \"trend_wma\" ~ \"Weighted MA\",       method == \"trend_zlema\" ~ \"Zero-Lag EMA\"     )   )  # Plot ggplot(plot_data, aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Advanced Moving Average Methods\",     subtitle = \"Weighted MA and Zero-Lag EMA reduce lag compared to simple MA\",     x = \"Date\",     y = \"Production (thousands of units)\",     color = \"Method\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":[]},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"application-1-identifying-trend-changes","dir":"Articles","previous_headings":"Practical Applications","what":"Application 1: Identifying Trend Changes","title":"Moving Averages for Trend Analysis","text":"Moving averages help identify trends change direction. Let’s look IBC-Br economic activity index:","code":"# Get recent IBC-Br data ibcbr_recent <- ibcbr |>   slice_tail(n = 72)  # Apply EWMA for responsiveness ibcbr_trend <- ibcbr_recent |>   augment_trends(     value_col = \"ibcbr\",     methods = \"ewma\",     smoothing = 0.25   )  # Prepare plot plot_data <- ibcbr_trend |>   select(date, ibcbr, trend_ewma) |>   pivot_longer(     cols = c(ibcbr, trend_ewma),     names_to = \"series\",     values_to = \"value\"   ) |>   mutate(     series = ifelse(series == \"ibcbr\", \"Original\", \"EWMA Trend\")   )  # Plot ggplot(plot_data, aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.9) +   labs(     title = \"IBC-Br Economic Activity Index\",     subtitle = \"EWMA trend helps identify economic turning points\",     x = \"Date\",     y = \"Index Value\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"application-2-seasonal-vs-non-seasonal-data","dir":"Articles","previous_headings":"Practical Applications","what":"Application 2: Seasonal vs Non-Seasonal Data","title":"Moving Averages for Trend Analysis","text":"Moving averages work differently seasonal data. Let’s compare electricity consumption (seasonal) vehicle production (less seasonal):   Key insight: strongly seasonal data like electricity consumption, 12-month MA removes seasonal pattern effectively. less seasonal data like vehicle production, MA primarily smooths irregular fluctuations.","code":"# Get recent electricity data (seasonal) electric_recent <- electric |>   slice_tail(n = 60)  # Apply same 12-month MA to both series electric_ma <- electric_recent |>   augment_trends(value_col = \"electric\", methods = \"ma\", window = 12)  vehicles_ma_comp <- vehicles_recent |>   augment_trends(value_col = \"vehicles\", methods = \"ma\", window = 12)  # Create plots p1 <- electric_ma |>   select(date, electric, trend_ma) |>   pivot_longer(cols = c(electric, trend_ma), names_to = \"series\") |>   mutate(series = ifelse(series == \"electric\", \"Original\", \"12-month MA\")) |>   ggplot(aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Electricity (Seasonal)\",     x = NULL,     y = \"GWh\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  p2 <- vehicles_ma_comp |>   select(date, vehicles, trend_ma) |>   pivot_longer(cols = c(vehicles, trend_ma), names_to = \"series\") |>   mutate(series = ifelse(series == \"vehicles\", \"Original\", \"12-month MA\")) |>   ggplot(aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Vehicles (Less Seasonal)\",     x = NULL,     y = \"Thousands\",     color = NULL   ) +   theme_minimal() +   theme(legend.position = \"bottom\")  # Display plots print(p1) print(p2)"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"application-3-cross-series-comparison","dir":"Articles","previous_headings":"Practical Applications","what":"Application 3: Cross-Series Comparison","title":"Moving Averages for Trend Analysis","text":"comparing multiple economic indicators, moving averages help focus underlying trends:  reveals different sectors economy moved together diverged time.","code":"# Prepare data for three indicators multi_series <- bind_rows(   ibcbr_recent |>     select(date, value = ibcbr) |>     mutate(indicator = \"Economic Activity\"),    vehicles_recent |>     select(date, value = vehicles) |>     mutate(indicator = \"Vehicle Production\"),    electric_recent |>     select(date, value = electric) |>     mutate(indicator = \"Electricity\") )  # Apply EWMA to all series multi_trends <- multi_series |>   group_by(indicator) |>   augment_trends(     value_col = \"value\",     methods = \"ewma\",     frequency = 12,     smoothing = 0.2   ) |>   ungroup()  # Normalize trends to first observation = 100 multi_normalized <- multi_trends |>   group_by(indicator) |>   mutate(     trend_normalized = (trend_ewma / first(trend_ewma)) * 100   ) |>   ungroup()  # Plot normalized trends ggplot(multi_normalized, aes(x = date, y = trend_normalized, color = indicator)) +   geom_line(linewidth = 1) +   labs(     title = \"Comparing Economic Indicators: EWMA Trends\",     subtitle = \"Normalized to first observation = 100\",     x = \"Date\",     y = \"Index (normalized)\",     color = \"Indicator\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"choosing-the-right-moving-average","dir":"Articles","previous_headings":"","what":"Choosing the Right Moving Average","title":"Moving Averages for Trend Analysis","text":"’s practical decision guide:","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"start-here-basic-questions","dir":"Articles","previous_headings":"Choosing the Right Moving Average","what":"Start Here: Basic Questions","title":"Moving Averages for Trend Analysis","text":"→ Use Simple MA window = 12 (monthly) 4 (quarterly) → Use EWMA α = 0.2-0.4 → Use EWMA α = 0.5-0.7 Zero-Lag EMA → Use Weighted MA Zero-Lag EMA → Consider STL decomposition instead (see advanced vignette)","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"parameter-selection-quick-reference","dir":"Articles","previous_headings":"Choosing the Right Moving Average","what":"Parameter Selection Quick Reference","title":"Moving Averages for Trend Analysis","text":"monthly data: quarterly data:","code":"# Conservative (smooth) data |> augment_trends(value_col = \"value\", methods = \"ma\", window = 24) data |> augment_trends(value_col = \"value\", methods = \"ewma\", smoothing = 0.15)  # Balanced (recommended starting point) data |> augment_trends(value_col = \"value\", methods = \"ma\", window = 12) data |> augment_trends(value_col = \"value\", methods = \"ewma\", smoothing = 0.3)  # Responsive (catches changes quickly) data |> augment_trends(value_col = \"value\", methods = \"ma\", window = 6) data |> augment_trends(value_col = \"value\", methods = \"ewma\", smoothing = 0.6) # Conservative data |> augment_trends(value_col = \"value\", methods = \"ma\", window = 8)  # Balanced data |> augment_trends(value_col = \"value\", methods = \"ma\", window = 4)  # Responsive data |> augment_trends(value_col = \"value\", methods = \"ewma\", smoothing = 0.5)"},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"pitfall-1-window-too-small","dir":"Articles","previous_headings":"Common Pitfalls and Solutions","what":"Pitfall 1: Window Too Small","title":"Moving Averages for Trend Analysis","text":"Problem: Trend still looks noisy Solution: Increase window size use EWMA lower α","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"pitfall-2-window-too-large","dir":"Articles","previous_headings":"Common Pitfalls and Solutions","what":"Pitfall 2: Window Too Large","title":"Moving Averages for Trend Analysis","text":"Problem: Trend lags behind recent changes Solution: Decrease window size, use EWMA/DEMA, try Hull MA","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"pitfall-3-missing-values-at-edges","dir":"Articles","previous_headings":"Common Pitfalls and Solutions","what":"Pitfall 3: Missing Values at Edges","title":"Moving Averages for Trend Analysis","text":"Problem: MA produces NA values start/end Solution: expected - MAs need complete windows. Use methods like HP filter Kalman smoother need values edges.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"pitfall-4-using-ma-on-trending-data","dir":"Articles","previous_headings":"Common Pitfalls and Solutions","what":"Pitfall 4: Using MA on Trending Data","title":"Moving Averages for Trend Analysis","text":"Problem: MA doesn’t remove overall upward/downward trend Solution: Moving averages extract trends, don’t remove . want detrend data, consider first-differencing HP filter gap analysis.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Moving Averages for Trend Analysis","text":"Moving averages versatile tools trend extraction: Simple MA: Best stable trends need interpretability EWMA: Great general-purpose choice recent data important Weighted MA/Zero-Lag EMA: Use need smoothness responsiveness Key parameters: - Window size (MA): 12 months typical monthly data - Alpha (EWMA): 0.2-0.4 applications Remember: Always visualize results experiment parameters. “best” method parameters depend specific data analytical goals.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Moving Averages for Trend Analysis","text":"seasonal data: See “Advanced Methods” vignette STL decomposition business cycle analysis: See “Economic Filters” vignette HP, BK, CF filters general introduction: See “Getting Started” vignette","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"appendix-mathematical-details","dir":"Articles","previous_headings":"","what":"Appendix: Mathematical Details","title":"Moving Averages for Trend Analysis","text":"readers interested mathematical foundations:","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"simple-moving-average","dir":"Articles","previous_headings":"Appendix: Mathematical Details","what":"Simple Moving Average","title":"Moving Averages for Trend Analysis","text":"MAt=1n∑=0n−1Xt−\\text{MA}_t = \\frac{1}{n} \\sum_{=0}^{n-1} X_{t-} XtX_t value time tt, nn window size.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"exponentially-weighted-moving-average","dir":"Articles","previous_headings":"Appendix: Mathematical Details","what":"Exponentially Weighted Moving Average","title":"Moving Averages for Trend Analysis","text":"EWMAt=α⋅Xt+(1−α)⋅EWMAt−1\\text{EWMA}_t = \\alpha \\cdot X_t + (1-\\alpha) \\cdot \\text{EWMA}_{t-1} 0<α≤10 < \\alpha \\leq 1 smoothing parameter. Alternatively expressed : EWMAt=α∑=0∞(1−α)iXt−\\text{EWMA}_t = \\alpha \\sum_{=0}^{\\infty} (1-\\alpha)^X_{t-} shows EWMA infinite weighted sum exponentially decaying weights.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"weighted-moving-average","dir":"Articles","previous_headings":"Appendix: Mathematical Details","what":"Weighted Moving Average","title":"Moving Averages for Trend Analysis","text":"WMAt=∑=0n−1wi⋅Xt−∑=0n−1wi\\text{WMA}_t = \\frac{\\sum_{=0}^{n-1} w_i \\cdot X_{t-}}{\\sum_{=0}^{n-1} w_i} wiw_i weights (typically wi=n−iw_i = n-, giving weight recent observations) nn window size.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/moving-averages.html","id":"zero-lag-exponential-moving-average","dir":"Articles","previous_headings":"Appendix: Mathematical Details","what":"Zero-Lag Exponential Moving Average","title":"Moving Averages for Trend Analysis","text":"ZLEMA modifies EWMA reduce lag using de-lagged data series: ZLEMAt=EMA(Xt+(Xt−Xt−lag))\\text{ZLEMA}_t = \\text{EMA}(X_t + (X_t - X_{t-\\text{lag}})) lag calculated based smoothing parameter, effectively compensating lag inherent exponential smoothing.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"what-is-trendseries","dir":"Articles","previous_headings":"","what":"What is trendseries?","title":"Getting Started with trendseries","text":"trendseries package helps extract trends economic time series data. Think trends underlying direction data, stripped short-term fluctuations noise. vignette walk basics, starting simplest possible example gradually building complex analyses.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"purpose","dir":"Articles","previous_headings":"What is trendseries?","what":"Purpose","title":"Getting Started with trendseries","text":"main purpose trendseries simplify workflow trend extraction, especially working data frames grouped data. provides two main functions: augment_trends(): Takes data frame date column value column, adds new columns extracted trends using specified methods. extract_trends(): Takes single time series object (ts) returns extracted trends. Tabular data frames common format time series data R, trend extraction methods designed ts objects. trendseries bridges gap, allowing work directly data frames without cumbersome conversions. trendseries designed work fluidly tidyverse tools like dplyr ggplot2. package designed economic time series mind, sense, includes methods commonly used economics (e.g., Hodrick-Prescott filter) well general-purpose smoothing methods (e.g., LOESS, moving averages).","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"your-first-trend-analysis","dir":"Articles","previous_headings":"What is trendseries?","what":"Your First Trend Analysis","title":"Getting Started with trendseries","text":"Let’s start simplest possible example: extracting trend Brazilian GDP construction data. dataset contains quarterly observations Brazil’s construction sector GDP. Let’s extract trend using Hodrick-Prescott (HP) filter, one common methods economics. ’s ! augment_trends() function added new column called trend_hp data. original data stays intact, get new column trend.","code":"# Load the data data(\"gdp_construction\", package = \"trendseries\")  # Take a quick look head(gdp_construction) #> # A tibble: 6 × 2 #>   date       gdp_construction #>   <date>                <dbl> #> 1 1995-01-01            100   #> 2 1995-04-01            100   #> 3 1995-07-01            100   #> 4 1995-10-01            100   #> 5 1996-01-01             97.8 #> 6 1996-04-01            101. # Extract trend using HP filter gdp_with_trend <- augment_trends(   gdp_construction,   value_col = \"gdp_construction\",   methods = \"hp\" ) #> Auto-detected quarterly (4 obs/year) #> Computing HP filter (two-sided) with lambda = 1600  # View the result head(gdp_with_trend) #> # A tibble: 6 × 3 #>   date       gdp_construction trend_hp #>   <date>                <dbl>    <dbl> #> 1 1995-01-01            100       101. #> 2 1995-04-01            100       101. #> 3 1995-07-01            100       102. #> 4 1995-10-01            100       103. #> 5 1996-01-01             97.8     103. #> 6 1996-04-01            101.      104."},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"visualizing-your-first-trend","dir":"Articles","previous_headings":"What is trendseries?","what":"Visualizing Your First Trend","title":"Getting Started with trendseries","text":"Let’s see trend looks like.  Notice trend smooths short-term fluctuations original data. makes easier see long-term direction construction sector.","code":"# Prepare data for plotting plot_data <- gdp_with_trend |>   select(date, gdp_construction, trend_hp) |>   tidyr::pivot_longer(     cols = c(gdp_construction, trend_hp),     names_to = \"series\",     values_to = \"value\"   ) |>   mutate(     series = case_when(       series == \"gdp_construction\" ~ \"Data (original)\",       series == \"trend_hp\" ~ \"HP Filter Trend\"     )   )  # Create the plot ggplot(plot_data, aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Brazil GDP Construction: Original vs Trend\",     x = \"Date\",     y = \"Construction Index\",     color = NULL   ) +   theme_series"},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"what-if-my-data-is-a-sinlge-time-series","dir":"Articles","previous_headings":"What is trendseries?","what":"What if my data is a sinlge time series?","title":"Getting Started with trendseries","text":"data already ts object, can use extract_trends() function directly. useful quick analyses working single series.","code":"gdp <- ts(   gdp_construction$gdp_construction,   frequency = 4,   start = c(1996, 1) )  gdp_trend_hp <- extract_trends(gdp, \"hp\") #> Computing HP filter (two-sided) with lambda = 1600"},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"trying-different-trend-methods","dir":"Articles","previous_headings":"What is trendseries?","what":"Trying Different Trend Methods","title":"Getting Started with trendseries","text":"HP filter just one way extract trends. Let’s compare two popular methods. HP filter: Standard choice macroeconomics LOESS: Local polynomial smoothing Moving Average (MA): Simple average nearby points Now let’s visualize three methods:  method produces slightly different trend. HP filter LOESS quite similar, moving average slightly responsive changes data.","code":"# Extract multiple trends at once gdp_comparison <- gdp_construction |>   augment_trends(     value_col = \"gdp_construction\",     methods = c(\"hp\", \"loess\", \"ma\")   ) #> Auto-detected quarterly (4 obs/year) #> Computing HP filter (two-sided) with lambda = 1600 #> Computing loess trend with span = 0.75 #> Computing 2x{window}-period moving average with center alignment  # View the first few rows gdp_comparison |>   select(date, gdp_construction, starts_with(\"trend_\")) |>   head() #> # A tibble: 6 × 5 #>   date       gdp_construction trend_hp trend_loess trend_ma #>   <date>                <dbl>    <dbl>       <dbl>    <dbl> #> 1 1995-01-01            100       101.        109.     NA   #> 2 1995-04-01            100       101.        109.    100   #> 3 1995-07-01            100       102.        108.     99.4 #> 4 1995-10-01            100       103.        107.     99.7 #> 5 1996-01-01             97.8     103.        107.    102.  #> 6 1996-04-01            101.      104.        106.    102. # Prepare data for plotting comparison_plot <- gdp_comparison |>   select(date, gdp_construction, starts_with(\"trend_\")) |>   tidyr::pivot_longer(     cols = c(gdp_construction, starts_with(\"trend_\")),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"gdp_construction\" ~ \"Data (original)\",       method == \"trend_hp\" ~ \"HP Filter\",       method == \"trend_loess\" ~ \"LOESS\",       method == \"trend_ma\" ~ \"Moving Average\"     )   )  # Plot ggplot(comparison_plot, aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Comparing Different Trend Extraction Methods\",     subtitle = \"Same data, different methods\",     x = \"Date\",     y = \"Construction Index\",     color = \"Method\"   ) +   theme_series #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"working-with-monthly-data","dir":"Articles","previous_headings":"What is trendseries?","what":"Working with Monthly Data","title":"Getting Started with trendseries","text":"far ’ve used quarterly data (4 observations per year). Let’s try monthly data, common economic analysis. process exactly - augment_trends() automatically detects frequency.","code":"# Load monthly vehicle production data data(\"vehicles\", package = \"trendseries\")  # Look at recent data (last 4 years) recent_vehicles <- vehicles |>   slice_tail(n = 48)  head(recent_vehicles) #> # A tibble: 6 × 2 #>   date       vehicles #>   <date>        <dbl> #> 1 2021-08-01   178900 #> 2 2021-09-01   156803 #> 3 2021-10-01   170178 #> 4 2021-11-01   176322 #> 5 2021-12-01   219446 #> 6 2022-01-01   136105 # Extract trend from monthly data vehicles_with_trend <- vehicles |>   augment_trends(     value_col = \"vehicles\",     methods = \"hp\"   ) #> Auto-detected monthly (12 obs/year) #> Computing HP filter (two-sided) with lambda = 14400  vehicles_with_trend <- vehicles_with_trend |>   tidyr::pivot_longer(     cols = c(vehicles, trend_hp),     names_to = \"series\",     values_to = \"value\"   ) |>   mutate(     series = ifelse(series == \"vehicles\", \"Original\", \"HP Trend\"),     # To make sure the trend is plotted on top of the original series     # configure levels accordingly     series = factor(series, levels = c(\"Original\", \"HP Trend\"))   )  ggplot(vehicles_with_trend, aes(x = date, y = value, color = series)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Brazil Vehicle Production: Monthly Data\",     subtitle = \"Last 4 years of data\",     x = \"Date\",     y = \"Production (thousands of units)\",     color = NULL   ) +   theme_series"},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"understanding-parameters-window-and-smoothing","dir":"Articles","previous_headings":"What is trendseries?","what":"Understanding Parameters: Window and Smoothing","title":"Getting Started with trendseries","text":"Different trend methods accept different parameters. trendseries package simplifies two main parameters: window: Controls period moving averages (e.g., 12 months) smoothing: Controls smooth trend Let’s experiment window parameter moving average.  Key insight: Larger windows produce smoother trends slower react changes. Smaller windows track data closely may still include noise. monthly data: - Short-term trend: window = 3 6 - Medium-term trend: window = 12 (one year) - Long-term trend: window = 24 ","code":"# Try different window sizes vehicles_windows <- recent_vehicles |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 6   ) |>   rename(trend_ma_6m = trend_ma) #> Auto-detected monthly (12 obs/year) #> Computing {window}-period moving average with center alignment  # Add 12-month window vehicles_windows <- vehicles_windows |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 12   ) #> Auto-detected monthly (12 obs/year) #> Computing 2x{window}-period moving average with center alignment  # Visualize vehicles_windows <- vehicles_windows |>   select(date, vehicles, trend_ma_6m, trend_ma) |>   tidyr::pivot_longer(     cols = c(vehicles, trend_ma_6m, trend_ma),     names_to = \"method\",     values_to = \"value\"   ) |>   mutate(     method = case_when(       method == \"vehicles\" ~ \"Data (original)\",       method == \"trend_ma_6m\" ~ \"MA (6-month)\",       method == \"trend_ma\" ~ \"MA (12-month)\"     )   )  ggplot(vehicles_windows, aes(x = date, y = value, color = method)) +   geom_line(linewidth = 0.8) +   labs(     title = \"Window Size Comparison\",     subtitle = \"Larger windows = smoother trends\",     x = \"Date\",     y = \"Production (thousands)\",     color = NULL   ) +   theme_series #> Warning: Removed 16 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"working-with-multiple-series","dir":"Articles","previous_headings":"What is trendseries?","what":"Working with Multiple Series","title":"Getting Started with trendseries","text":"common task comparing trends across different time-series. Let’s look economic activity vehicle production together. augment_trends() can handle easily group_vars argument.  shows series moved together pandemic period diverged afterwards, economic activity recovering strongly vehicle production.","code":"data(\"ibcbr\", package = \"trendseries\")  series <- full_join(ibcbr, vehicles, by = \"date\")  series <- series |>   filter(date >= as.Date(\"2010-01-01\")) |>   tidyr::pivot_longer(     cols = c(ibcbr, vehicles),     names_to = \"indicator\",     values_to = \"value\"   ) |>   # Normalize to Jan 2010 = 100 for comparison   mutate(     index = value / first(value) * 100,     .by = indicator   )  series <- augment_trends(   series,   value_col = \"index\",   methods = \"hp\",   group_vars = \"indicator\" ) #> Auto-detected monthly (12 obs/year) #> Computing HP filter (two-sided) with lambda = 14400 #> Auto-detected monthly (12 obs/year) #> Computing HP filter (two-sided) with lambda = 14400 # Plot trends only series |>   ggplot(aes(x = date, color = indicator)) +   geom_line(aes(y = index), alpha = 0.4) +   geom_line(aes(y = trend_hp), linewidth = 1) +   labs(     title = \"Economic Indicators: HP Filter Trends\",     subtitle = \"Normalized to first observation = 100\",     x = \"Date\",     y = \"Index (normalized)\",     color = \"Indicator\"   ) +   theme_series"},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"available-trend-methods","dir":"Articles","previous_headings":"What is trendseries?","what":"Available Trend Methods","title":"Getting Started with trendseries","text":"trendseries package supports many trend extraction methods. commonly used:","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"economiceconometric-filters","dir":"Articles","previous_headings":"What is trendseries? > Available Trend Methods","what":"Economic/Econometric Filters","title":"Getting Started with trendseries","text":"hp: Hodrick-Prescott filter (default, widely used macroeconomics) bk: Baxter-King bandpass filter (isolates business cycles) cf: Christiano-Fitzgerald filter (asymmetric bandpass) hamilton: Hamilton regression filter (recent alternative HP)","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"moving-averages","dir":"Articles","previous_headings":"What is trendseries? > Available Trend Methods","what":"Moving Averages","title":"Getting Started with trendseries","text":"ma: Simple moving average (easiest understand) ewma: Exponentially weighted moving average (weight recent data) wma: Weighted moving average (emphasizes recent observations) zlema: Zero-lag exponential moving average (reduced lag) triangular: Triangular moving average (double-smoothed)","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"smoothing-methods","dir":"Articles","previous_headings":"What is trendseries? > Available Trend Methods","what":"Smoothing Methods","title":"Getting Started with trendseries","text":"loess: Local polynomial regression (flexible, data-adaptive) spline: Smoothing splines (smooth) stl: Seasonal-trend decomposition (handles seasonality)","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"advanced-methods","dir":"Articles","previous_headings":"What is trendseries? > Available Trend Methods","what":"Advanced Methods","title":"Getting Started with trendseries","text":"sg: Savitzky-Golay filter (preserves features like peaks) kalman: Kalman smoother (optimal certain assumptions) kernel: Kernel regression smoother (nonparametric) Recommendation beginners: Start hp general use, ma want something simple interpretable, stl data clear seasonal patterns.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"quick-reference-common-patterns","dir":"Articles","previous_headings":"What is trendseries?","what":"Quick Reference: Common Patterns","title":"Getting Started with trendseries","text":"ready--use patterns common scenarios:","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"basic-trend-extraction","dir":"Articles","previous_headings":"What is trendseries? > Quick Reference: Common Patterns","what":"Basic trend extraction","title":"Getting Started with trendseries","text":"","code":"# Single method, quarterly data data |>   augment_trends(value_col = \"your_column\", methods = \"hp\")  # Single series, monthly data extract_trends(your_ts_data, method = \"loess\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"compare-multiple-methods","dir":"Articles","previous_headings":"What is trendseries? > Quick Reference: Common Patterns","what":"Compare multiple methods","title":"Getting Started with trendseries","text":"","code":"data |>   augment_trends(     value_col = \"your_column\",     methods = c(\"hp\", \"loess\", \"ma\")   )"},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"control-smoothness","dir":"Articles","previous_headings":"What is trendseries? > Quick Reference: Common Patterns","what":"Control smoothness","title":"Getting Started with trendseries","text":"","code":"# Smoother HP filter (higher lambda) data |>   augment_trends(     value_col = \"your_column\",     methods = \"hp\",     smoothing = 3200  # vs default 1600 for quarterly   )  # Longer moving average window data |>   augment_trends(     value_col = \"your_column\",     methods = \"ma\",     window = 24  # 2-year window for monthly data   )"},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"grouped-data","dir":"Articles","previous_headings":"What is trendseries? > Quick Reference: Common Patterns","what":"Grouped data","title":"Getting Started with trendseries","text":"","code":"# Apply trend to multiple series at once multi_series_data |>   group_by(country) |>   augment_trends(value_col = \"gdp\", methods = \"hp\") |>   ungroup()  # Or using group_vars argument multi_series_data |>   augment_trends(     value_col = \"gdp\",     methods = \"hp\",     group_vars = \"country\"   )"},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"next-steps","dir":"Articles","previous_headings":"What is trendseries?","what":"Next Steps","title":"Getting Started with trendseries","text":"Now understand basics, can: Explore specific methods depth: Check “Moving Averages” vignette detailed analysis MA methods. Learn economic filters: See “Economic Filters” vignette HP, BK, CF filters. Try advanced methods: Explore STL decomposition, Kalman filtering, “Advanced Methods” vignette. Read function documentation: ?augment_trends ?extract_trends.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"built-in-datasets","dir":"Articles","previous_headings":"What is trendseries?","what":"Built-in Datasets","title":"Getting Started with trendseries","text":"package includes several economic datasets practice.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"brazilian-economic-data","dir":"Articles","previous_headings":"What is trendseries? > Built-in Datasets","what":"Brazilian Economic Data","title":"Getting Started with trendseries","text":"series monthly except gdp_construction. - ibcbr: Central Bank Economic Activity Index - smooth, good learning - vehicles: Vehicle production - cyclical, interesting patterns - electric: Electricity consumption - seasonal patterns - oil_derivatives: Oil derivatives production - gdp_construction: GDP construction index - smooth, great first examples","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"international-data","dir":"Articles","previous_headings":"What is trendseries? > Built-in Datasets","what":"International Data","title":"Getting Started with trendseries","text":"retail_households: UK household goods retail (monthly) retail_autofuel: UK automotive fuel retail (monthly) coffee_arabica: Coffee prices (daily) coffee_robusta: Coffee prices (daily)","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"how-is-trendseries-easier-than-the-traditional-workflow","dir":"Articles","previous_headings":"FAQ","what":"How is trendseries easier than the traditional workflow?","title":"Getting Started with trendseries","text":"Time series specific structure R (ts) filtering methods designed ts objects. However, datasets come data frames date columns, can make applying filters cumbersome. usual workflow involves (1) converting individual columns ts, (2) applying filter, (3) converting back data.frame. can cumbersome, especially working multiple series grouped data. Merging back results original data can also error-prone due misalignment dates additional NA values introduced filters. instance, replicate first example vignette, without trendseries, first convert data frame ts object, mannually inputing frequency start parameters: apply HP filter using mFilter package. finally, convert back data.frame merge original data.","code":"gdp_cons <- ts(   gdp_construction$gdp_construction,   frequency = 4,   start = c(1996, 1) )  # Or, using lubridate to extract year and month gdp_cons <- ts(   gdp_construction$gdp_construction,   frequency = 4,   start = c(lubridate::year(min(gdp_construction$date)),             lubridate::quarter(min(gdp_construction$date))) ) gdp_trend_hp <- mFilter::hpfilter(gdp_cons, 1600) # Convert back to data frame using tsbox trend_df <- tsbox::ts_df(gdp_trend_hp$trend) names(trend_df) <- c(\"date\", \"trend_hp\")  # Join with original data gdp_manual <- left_join(gdp_construction, trend_df, by = \"date\")"},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"what-are-the-alternatives-to-trendseries","dir":"Articles","previous_headings":"FAQ","what":"What are the alternatives to trendseries?","title":"Getting Started with trendseries","text":"closest alternative trendseries tsibble/fable ecosystem, provides model() function applying models — including trend extraction methods — grouped time series. Like trendseries, packages integrate well tidyverse tools pipes. However, fable designed primarily forecasting, means trend extraction capabilities limited. also lack popular methods commonly used economists, HP filter Hamilton filter. Additionally, packages require using tsibble data structure, pulls users away familiar data.frame/tibble format. users working just time series relying R’s built-ts functionality, tsibble structure can feel unnecessarily complex.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"acknowledgements","dir":"Articles","previous_headings":"FAQ","what":"Acknowledgements","title":"Getting Started with trendseries","text":"package inspired need simpler workflow trend extraction R. builds upon many existing packages, including: mFilter economic filters. hpfilter Hodrick-Prescott filtering. signal Savitzky-Golay filtering. TTR zoo efficient moving averages. tsbox time series conversions.","code":""},{"path":"https://viniciusoike.github.io/trendseries/articles/trendseries.html","id":"getting-help","dir":"Articles","previous_headings":"FAQ","what":"Getting Help","title":"Getting Started with trendseries","text":"run issues: Check documentation: ?augment_trends View examples: example(augment_trends) Read vignettes: vignette(package = \"trendseries\") Report bugs: GitHub issues","code":""},{"path":"https://viniciusoike.github.io/trendseries/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vinicius Oike. Maintainer.","code":""},{"path":"https://viniciusoike.github.io/trendseries/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oike V (2025). trendseries: Extract Trends Time Series. R package version 1.0.0, https://github.com/viniciusoike/trendseries.","code":"@Manual{,   title = {trendseries: Extract Trends from Time Series},   author = {Vinicius Oike},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/viniciusoike/trendseries}, }"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"extract-trends-time-series","dir":"","previous_headings":"","what":"Extract Trends from Time Series","title":"Extract Trends from Time Series","text":"trendseries provides modern, pipe-friendly interface exploratory analysis economic data. package simplifies workflow trend extraction, especially working data frames grouped time series. offers smart defaults optimized business cycle analysis includes established econometric methods alongside general-purpose smoothing techniques.","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"why-trendseries","dir":"","previous_headings":"","what":"Why trendseries?","title":"Extract Trends from Time Series","text":"Working economic time series R often involves cumbersome conversions data frames ts objects. filtering methods designed ts objects, modern data analysis workflows use tibble data.frame date columns. trendseries bridges gap : Working directly data frames - manual conversions ts objects Pipe-friendly design - Integrates seamlessly tidyverse workflows using |> Smart defaults - Economic-appropriate parameters (λ=1600 quarterly, λ=14400 monthly) Grouped operations - Apply trends multiple series Comprehensive methods - HP filters Kalman smoothing","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Trends from Time Series","text":"Install development version GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"viniciusoike/trendseries\")"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"two-main-functions","dir":"","previous_headings":"","what":"Two Main Functions","title":"Extract Trends from Time Series","text":"package architecture built around two complementary functions:","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"augment_trends---for-data-frames-and-tibbles","dir":"","previous_headings":"Two Main Functions","what":"augment_trends() - For data frames and tibbles","title":"Extract Trends from Time Series","text":"Add trend columns existing data pipe-friendly workflow. Perfect exploratory analysis working multiple series.","code":"library(trendseries)  # Simple workflow gdp_construction |>   augment_trends(value_col = \"gdp_construction\", methods = \"hp\")  # Grouped analysis multi_series |>   augment_trends(     value_col = \"value\",     methods = c(\"hp\", \"ma\"),     group_vars = \"country\"   )"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"extract_trends---for-time-series-objects","dir":"","previous_headings":"Two Main Functions","what":"extract_trends() - For time series objects","title":"Extract Trends from Time Series","text":"Extract trends directly ts, xts, zoo objects. Focused pure econometric analysis.","code":"# Convert to ts and extract trend ts_data <- df_to_ts(gdp_construction, frequency = 4) extract_trends(ts_data, methods = \"hp\")"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"unified-parameter-system","dir":"","previous_headings":"Two Main Functions","what":"Unified Parameter System","title":"Extract Trends from Time Series","text":"methods use consistent parameter interface possible. window: Controls period moving averages related methods. smoothing: Controls smoothness HP, LOESS, splines. band: Specifies frequency bands bandpass filters (e.g., c(6, 32) business cycles). params: Named list method-specific advanced parameters.","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"basic-trend-extraction","dir":"","previous_headings":"Examples","what":"Basic Trend Extraction","title":"Extract Trends from Time Series","text":"","code":"library(trendseries) library(dplyr)  # Load Brazilian GDP construction data (quarterly) data(\"gdp_construction\")  # Extract HP filter trend gdp_with_trend <- gdp_construction |>   augment_trends(     value_col = \"gdp_construction\",     methods = \"hp\"   )"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"comparing-multiple-methods","dir":"","previous_headings":"Examples","what":"Comparing Multiple Methods","title":"Extract Trends from Time Series","text":"","code":"# Compare HP filter, LOESS, and moving average gdp_construction |>   augment_trends(     value_col = \"gdp_construction\",     methods = c(\"hp\", \"loess\", \"ma\")   ) |>   select(date, gdp_construction, starts_with(\"trend_\"))"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"working-with-monthly-data","dir":"","previous_headings":"Examples","what":"Working with Monthly Data","title":"Extract Trends from Time Series","text":"","code":"# Load monthly vehicle production data data(\"vehicles\")  # Extract trend with 12-month moving average vehicles |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 12   )"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"grouped-time-series","dir":"","previous_headings":"Examples","what":"Grouped Time Series","title":"Extract Trends from Time Series","text":"","code":"# Combine datasets combined_data <- full_join(ibcbr, vehicles, by = \"date\") |>   tidyr::pivot_longer(     cols = c(ibcbr, vehicles),     names_to = \"indicator\",     values_to = \"value\"   )  # Extract trends for each indicator combined_data |>   augment_trends(     value_col = \"value\",     methods = \"hp\",     group_vars = \"indicator\"   )"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"available-methods","dir":"","previous_headings":"","what":"Available Methods","title":"Extract Trends from Time Series","text":"trendseries includes comprehensive set trend extraction methods optimized economic time series analysis.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"smart-economic-defaults","dir":"","previous_headings":"Key Features","what":"Smart Economic Defaults","title":"Extract Trends from Time Series","text":"package automatically applies economic-appropriate defaults based data frequency: HP filter: λ=1600 (quarterly), λ=14400 (monthly) Moving averages: 4-quarter window (quarterly), 12-month window (monthly) Bandpass filters: 6-32 quarter business cycle range STL decomposition: Seasonality-appropriate parameters","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"grouped-operations","dir":"","previous_headings":"Key Features","what":"Grouped Operations","title":"Extract Trends from Time Series","text":"Work multiple time series effortlessly:","code":"# Apply same trend method to multiple countries multi_country_gdp |>   augment_trends(     value_col = \"gdp\",     methods = \"hp\",     group_vars = c(\"country\", \"sector\")   )"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"intelligent-column-naming","dir":"","previous_headings":"Key Features","what":"Intelligent Column Naming","title":"Extract Trends from Time Series","text":"Avoid naming conflicts automatic column renaming:","code":"# Creates: trend_hp, trend_ma, trend_loess data |>   augment_trends(methods = c(\"hp\", \"ma\", \"loess\"))  # With custom suffixes for different parameters data |>   augment_trends(methods = \"ma\", window = 4) |>   augment_trends(methods = \"ma\", window = 12) # Creates: trend_ma (window=4), trend_ma (window=12, auto-renamed)"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"modern-r-practices","dir":"","previous_headings":"Key Features","what":"Modern R Practices","title":"Extract Trends from Time Series","text":"Native pipe |> compatible Works seamlessly dplyr, tidyr, ggplot2 Comprehensive error messages via cli package Type-safe parameter validation","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"included-datasets","dir":"","previous_headings":"","what":"Included Datasets","title":"Extract Trends from Time Series","text":"package includes economic indicators testing examples:","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"brazilian-data-bcb---central-bank","dir":"","previous_headings":"Included Datasets","what":"Brazilian Data (BCB - Central Bank)","title":"Extract Trends from Time Series","text":"gdp_construction: Quarterly construction sector GDP index (1995-2023, seasonally adjusted) ibcbr: Monthly Central Bank Economic Activity Index (smooth, good learning) vehicles: Monthly vehicle production thousands units (cyclical patterns) oil_derivatives: Monthly oil derivatives production electric: Monthly residential electricity consumption GWh","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"uk-retail-sales-ons","dir":"","previous_headings":"Included Datasets","what":"UK Retail Sales (ONS)","title":"Extract Trends from Time Series","text":"retail_households: Monthly household goods stores retail sales index retail_autofuel: Monthly automotive fuel retail sales index","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"coffee-prices-cepea---daily-data","dir":"","previous_headings":"Included Datasets","what":"Coffee Prices (CEPEA - Daily data)","title":"Extract Trends from Time Series","text":"coffee_arabica: Daily arabica coffee prices inflation adjustment coffee_robusta: Daily robusta coffee prices inflation adjustment","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"metadata","dir":"","previous_headings":"Included Datasets","what":"Metadata","title":"Extract Trends from Time Series","text":"series_metadata: Metadata BCB economic series package datasets documented ready use:","code":"data(\"gdp_construction\") ?gdp_construction"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"Extract Trends from Time Series","text":"Explore detailed documentation examples vignettes: Getting Started - Complete introduction step--step examples Economic Filters - Deep dive HP, Baxter-King, Christiano-Fitzgerald filters Moving Averages - Comprehensive guide MA methods Advanced Methods - STL, Kalman filtering, ","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"function-documentation","dir":"","previous_headings":"Learn More","what":"Function Documentation","title":"Extract Trends from Time Series","text":"?augment_trends - Add trends data frames ?extract_trends - Extract trends time series objects ?df_to_ts - Convert data frames ts objects","code":""},{"path":[]},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"vs-traditional-workflow","dir":"","previous_headings":"How It Compares","what":"vs. Traditional Workflow","title":"Extract Trends from Time Series","text":"Without trendseries: trendseries:","code":"# Manual ts conversion gdp_ts <- ts(data$gdp, frequency = 4, start = c(1996, 1))  # Apply filter trend <- mFilter::hpfilter(gdp_ts, freq = 1600)  # Convert back and merge trend_df <- data.frame(   date = as.Date(time(gdp_ts)),   trend = as.numeric(trend$trend) ) result <- left_join(data, trend_df, by = \"date\") # One step data |>   augment_trends(value_col = \"gdp\", methods = \"hp\")"},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"vs-tsibblefable","dir":"","previous_headings":"How It Compares","what":"vs. tsibble/fable","title":"Extract Trends from Time Series","text":"tsibble/fable provides excellent forecasting tools, trendseries focuses specifically trend extraction : econometric methods: HP filter, Hamilton filter, bandpass filters Simpler workflow: Works standard data frames, need tsibble objects Specialized defaults: Optimized economic time series analysis Lighter dependencies: Built established packages like mFilter TTR Use fable forecasting, trendseries trend extraction exploratory analysis.","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Extract Trends from Time Series","text":"Documentation: ?augment_trends, ?extract_trends Examples: example(augment_trends) Vignettes: vignette(package = \"trendseries\") Issues: GitHub Issues Website: https://viniciusoike.github.io/trendseries/","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"design-philosophy","dir":"","previous_headings":"","what":"Design Philosophy","title":"Extract Trends from Time Series","text":"trendseries designed exploratory time series analysis, primary focus monthly quarterly economic data. prioritizes: Simplicity - Minimal boilerplate, maximum insight Consistency - Unified interface across methods Flexibility - Easy parameter experimentation Integration - Works seamlessly tidyverse tools package optimized economic time series (monthly/quarterly frequencies), smart defaults tailored business cycle analysis. certain methods (STL, moving averages, smoothing methods) can handle daily frequencies, defaults parameter suggestions calibrated standard economic data. focused scope enables better defaults cleaner API.","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Extract Trends from Time Series","text":"package builds upon excellent work R community: mFilter - Economic filters (HP, BK, CF) hpfilter - One-sided HP filter implementation RcppRoll - Fast C++ implementations rolling statistics forecast - Exponential smoothing methods dlm - Dynamic linear models Kalman filtering signal - Signal processing filters tsbox - Time series conversions","code":""},{"path":"https://viniciusoike.github.io/trendseries/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Extract Trends from Time Series","text":"MIT + file LICENSE","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/augment_trends.html","id":null,"dir":"Reference","previous_headings":"","what":"Add trend columns to data frame — augment_trends","title":"Add trend columns to data frame — augment_trends","text":"Pipe-friendly function adds trend columns tibble data.frame. Designed exploratory analysis monthly quarterly economic time series. Supports multiple trend extraction methods handles grouped data.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/augment_trends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add trend columns to data frame — augment_trends","text":"","code":"augment_trends(   data,   date_col = \"date\",   value_col = \"value\",   group_vars = NULL,   methods = \"hp\",   frequency = NULL,   suffix = NULL,   window = NULL,   smoothing = NULL,   band = NULL,   align = NULL,   params = list(),   .quiet = FALSE )"},{"path":"https://viniciusoike.github.io/trendseries/reference/augment_trends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add trend columns to data frame — augment_trends","text":"data data.frame, tibble, data.table containing time series data. date_col [character(1)] Name date column. Defaults \"date\". Must class Date. value_col [character(1)] Name value column. Defaults \"value\". Must numeric. group_vars [character()] | NULL Optional grouping variables multiple time series. Can character vector column names. methods [character()] Character vector trend methods. Options: \"hp\", \"bk\", \"cf\", \"ma\", \"stl\", \"loess\", \"spline\", \"poly\", \"bn\", \"ucm\", \"hamilton\", \"exp_simple\", \"exp_double\", \"ewma\", \"wma\", \"zlema\", \"triangular\", \"sg\", \"kernel\", \"butter\", \"kalman\". Default \"hp\". frequency [integer(1)] | NULL frequency series. Supports 4 (quarterly) 12 (monthly). auto-detected specified. suffix [character(1)] | NULL Optional suffix trend column names. NULL, uses method names. window [numeric(1)] | NULL Unified window/period parameter moving average methods (ma, wma, zlema, triangular, stl, sg, ewma). Must positive. NULL, uses frequency-appropriate defaults. EWMA, specifies window size using TTR's optimized implementation. used simultaneously smoothing EWMA method. smoothing [numeric(1)] | NULL Unified smoothing parameter smoothing methods (hp, loess, spline, exp_*, ewma, kernel, kalman). hp: use large values (1600+) small values (0-1) get converted. EWMA: specifies alpha parameter (0-1) traditional exponential smoothing. used simultaneously window EWMA method. kernel: multiplier optimal bandwidth (1.0 = optimal, <1 = less smooth, >1 = smooth). kalman: controls ratio measurement process noise (higher = smoothing). others: typically 0-1 range. band [numeric(2)] | NULL Unified band parameter bandpass filters (bk, cf, butter). values must positive. bk/cf: Provide c(low, high) low/high periods quarters, e.g., c(6, 32). butter: Provide c(cutoff, order) cutoff normalized frequency (0-1) order integer, e.g., c(0.1, 2). align [character(1)] | NULL Unified alignment parameter moving average methods (ma, wma, triangular, gaussian). Valid values: \"center\" (default, uses surrounding values), \"right\" (causal, uses past values ), \"left\" (anti-causal, uses future values ). Note: triangular supports \"center\" \"right\". NULL, uses \"center\" default. params [list()] Optional list method-specific parameters fine control. .quiet [logical(1)] TRUE, suppress informational messages.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/augment_trends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add trend columns to data frame — augment_trends","text":"tibble original data plus trend columns named trend_{method} trend_{method}_{suffix} suffix provided.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/augment_trends.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add trend columns to data frame — augment_trends","text":"function designed monthly (frequency = 12) quarterly (frequency = 4) economic data. uses economic-appropriate defaults trend extraction methods. grouped data, function applies trend extraction group separately, maintaining original data structure adding trend columns.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/augment_trends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add trend columns to data frame — augment_trends","text":"","code":"# Simple HP filter on quarterly GDP construction data gdp_construction |> augment_trends(value_col = \"gdp_construction\") #> Auto-detected quarterly (4 obs/year) #> Computing HP filter (two-sided) with lambda = 1600 #> # A tibble: 122 × 3 #>    date       gdp_construction trend_hp #>    <date>                <dbl>    <dbl> #>  1 1995-01-01            100       101. #>  2 1995-04-01            100       101. #>  3 1995-07-01            100       102. #>  4 1995-10-01            100       103. #>  5 1996-01-01             97.8     103. #>  6 1996-04-01            101.      104. #>  7 1996-07-01            107.      104. #>  8 1996-10-01            103.      105. #>  9 1997-01-01            101.      106. #> 10 1997-04-01            108.      106. #> # ℹ 112 more rows  # Multiple smoothing methods with unified parameter gdp_construction |>   augment_trends(     value_col = \"gdp_construction\",     methods = c(\"hp\", \"loess\", \"ewma\"),     smoothing = 0.3   ) #> Auto-detected quarterly (4 obs/year) #> Computing HP filter (two-sided) with lambda = 480 #> Computing loess trend with span = 0.3 #> Computing EWMA with alpha = 0.3 #> # A tibble: 122 × 5 #>    date       gdp_construction trend_hp trend_loess trend_ewma #>    <date>                <dbl>    <dbl>       <dbl>      <dbl> #>  1 1995-01-01            100       99.1        97.5      100   #>  2 1995-04-01            100      100.         98.9      100   #>  3 1995-07-01            100      101.        100.       100   #>  4 1995-10-01            100      102.        102.       100   #>  5 1996-01-01             97.8    103.        103.        99.3 #>  6 1996-04-01            101.     104.        104.        99.8 #>  7 1996-07-01            107.     104.        105.       102.  #>  8 1996-10-01            103.     105.        106.       102.  #>  9 1997-01-01            101.     106.        106.       102.  #> 10 1997-04-01            108.     107.        107.       104.  #> # ℹ 112 more rows  # Moving averages with unified window on monthly data vehicles |>   tail(60) |>   augment_trends(     value_col = \"vehicles\",     methods = c(\"ma\", \"wma\", \"zlema\"),     window = 8   ) #> Auto-detected monthly (12 obs/year) #> Computing {window}-period moving average with center alignment #> Computing 8-period weighted MA with linear weights, center alignment #> Computing ZLEMA with window = 8, auto ratio #> # A tibble: 60 × 5 #>    date       vehicles trend_ma trend_wma trend_zlema #>    <date>        <dbl>    <dbl>     <dbl>       <dbl> #>  1 2020-08-01   193421      NA        NA          NA  #>  2 2020-09-01   219033      NA        NA          NA  #>  3 2020-10-01   230927      NA        NA          NA  #>  4 2020-11-01   249104  216279.   213615.     249104  #>  5 2020-12-01   261321  216083.   208187.     261216. #>  6 2021-01-01   180904  214481.   205996.     232253. #>  7 2021-02-01   186718  209562.   200905.     208270. #>  8 2021-03-01   208801  200266    193166.     196717. #>  9 2021-04-01   191853  189963.   188418.     198069. #> 10 2021-05-01   206221  186951.   181049.     204215. #> # ℹ 50 more rows  # Economic indicators with different methods ibcbr |>   tail(48) |>   augment_trends(     value_col = \"ibcbr\",     methods = c(\"sg\", \"kalman\", \"kernel\"),     window = 9,     smoothing = 0.15   ) #> Auto-detected monthly (12 obs/year) #> Computing Savitzky-Golay filter with window = 9, polynomial order = 2 #> Computing Kalman smoother with measurement noise = auto #> Computing kernel smoother with bandwidth = {bandwidth}, kernel = normal #> # A tibble: 48 × 5 #>    date       ibcbr trend_sg trend_kalman trend_kernel #>    <date>     <dbl>    <dbl>        <dbl>        <dbl> #>  1 2021-08-01  99.3     99.3         98.0         99.3 #>  2 2021-09-01  97.1     97.7         97.9         97.1 #>  3 2021-10-01  96.5     96.7         97.8         96.5 #>  4 2021-11-01  97.8     96.2         97.9         97.8 #>  5 2021-12-01  99.2     96.2         98.0         99.1 #>  6 2022-01-01  91.9     97.2         98.0         92.0 #>  7 2022-02-01  95.7     98.2         98.6         95.7 #>  8 2022-03-01 105.      98.6         99.5        105.  #>  9 2022-04-01 100.      99.6         99.8        100.  #> 10 2022-05-01  99.8    102.         100.          99.8 #> # ℹ 38 more rows  # Moving average with right alignment (causal filter) vehicles |>   tail(60) |>   augment_trends(     value_col = \"vehicles\",     methods = \"ma\",     window = 12,     align = \"right\"   ) #> Auto-detected monthly (12 obs/year) #> Computing 2x{window}-period moving average with right alignment #> # A tibble: 60 × 3 #>    date       vehicles trend_ma #>    <date>        <dbl>    <dbl> #>  1 2020-08-01   193421       NA #>  2 2020-09-01   219033       NA #>  3 2020-10-01   230927       NA #>  4 2020-11-01   249104       NA #>  5 2020-12-01   261321       NA #>  6 2021-01-01   180904       NA #>  7 2021-02-01   186718       NA #>  8 2021-03-01   208801       NA #>  9 2021-04-01   191853       NA #> 10 2021-05-01   206221       NA #> # ℹ 50 more rows  # Advanced: fine-tune specific methods electric |>   tail(72) |>   augment_trends(     value_col = \"electric\",     methods = \"sg\",     window = 7,     params = list(sg_poly_order = 3)   ) #> Auto-detected monthly (12 obs/year) #> Computing Savitzky-Golay filter with window = 7, polynomial order = 3 #> # A tibble: 72 × 3 #>    date       electric trend_sg #>    <date>        <dbl>    <dbl> #>  1 2019-08-01    10987   10976. #>  2 2019-09-01    11379   11442. #>  3 2019-10-01    11973   11901. #>  4 2019-11-01    12424   12292. #>  5 2019-12-01    12201   12517. #>  6 2020-01-01    12909   12564. #>  7 2020-02-01    12383   12568. #>  8 2020-03-01    12432   12478. #>  9 2020-04-01    12318   12069. #> 10 2020-05-01    11756   11834. #> # ℹ 62 more rows"},{"path":"https://viniciusoike.github.io/trendseries/reference/coffee_arabica.html","id":null,"dir":"Reference","previous_headings":"","what":"CEPEA Arabica Coffee Prices — coffee_arabica","title":"CEPEA Arabica Coffee Prices — coffee_arabica","text":"Daily Arabica coffee price data CEPEA/ESALQ inflation adjustment. Type 6 coffee prices delivered São Paulo (capital).","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/coffee_arabica.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CEPEA Arabica Coffee Prices — coffee_arabica","text":"","code":"coffee_arabica"},{"path":"https://viniciusoike.github.io/trendseries/reference/coffee_arabica.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CEPEA Arabica Coffee Prices — coffee_arabica","text":"tibble daily observations: date Date column spot_rs Spot price Brazilian Reais per 60-kg bag spot_us Spot price US Dollars per 60-kg bag usd_2022 US Dollar price adjusted inflation (base year 2022) trend 22-day rolling mean inflation-adjusted prices","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/coffee_arabica.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CEPEA Arabica Coffee Prices — coffee_arabica","text":"CEPEA - Center Advanced Studies Applied Economics","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/coffee_robusta.html","id":null,"dir":"Reference","previous_headings":"","what":"CEPEA Robusta Coffee Prices — coffee_robusta","title":"CEPEA Robusta Coffee Prices — coffee_robusta","text":"Daily Robusta coffee price data CEPEA/ESALQ inflation adjustment. Type 6 coffee prices Espírito Santo state.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/coffee_robusta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CEPEA Robusta Coffee Prices — coffee_robusta","text":"","code":"coffee_robusta"},{"path":"https://viniciusoike.github.io/trendseries/reference/coffee_robusta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CEPEA Robusta Coffee Prices — coffee_robusta","text":"tibble daily observations: date Date column spot_rs Spot price Brazilian Reais per 60-kg bag spot_us Spot price US Dollars per 60-kg bag usd_2022 US Dollar price adjusted inflation (base year 2022) trend 22-day rolling mean inflation-adjusted prices","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/coffee_robusta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CEPEA Robusta Coffee Prices — coffee_robusta","text":"CEPEA - Center Advanced Studies Applied Economics","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/converters.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Format Conversion Utilities — converters","title":"Data Format Conversion Utilities — converters","text":"Functions converting different time series formats, frequency detection, data frame manipulation trendseries package. functions handle interface tibble/data.frame workflows time series objects.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/df_to_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.frame into a time series (ts) — df_to_ts","title":"Convert a data.frame into a time series (ts) — df_to_ts","text":"Converts series, stored data.frame tibble, ts object.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/df_to_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame into a time series (ts) — df_to_ts","text":"","code":"df_to_ts(x, date_colname = \"date\", value_colname = \"value\", frequency = 12)"},{"path":"https://viniciusoike.github.io/trendseries/reference/df_to_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame into a time series (ts) — df_to_ts","text":"x data.frame, tibble data.table. date_colname Name date column. Defaults 'date'. Must class Date. value_colname Name value column. Defaults 'value'. Must numeric. frequency frequency series. Can shortened string (e.g. \"M\" monthly) number (e.g. 12).","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/df_to_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data.frame into a time series (ts) — df_to_ts","text":"ts object","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/df_to_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame into a time series (ts) — df_to_ts","text":"","code":"ibc <- df_to_ts(ibcbr, value_colname = \"ibcbr\", frequency = \"M\") class(ibc) #> [1] \"ts\" plot(ibc)"},{"path":"https://viniciusoike.github.io/trendseries/reference/electric.html","id":null,"dir":"Reference","previous_headings":"","what":"Electric Consumption Residential — electric","title":"Electric Consumption Residential — electric","text":"Monthly residential electric consumption Brazil (GWh).","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/electric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Electric Consumption Residential — electric","text":"","code":"electric"},{"path":"https://viniciusoike.github.io/trendseries/reference/electric.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Electric Consumption Residential — electric","text":"tibble monthly observations: date Date column electric Electric consumption GWh","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/electric.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Electric Consumption Residential — electric","text":"Brazilian Central Bank SGS (code 1403)","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/extract_trends.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract trends from time series objects — extract_trends","title":"Extract trends from time series objects — extract_trends","text":"Extract trend components time series objects using various econometric methods. Designed monthly quarterly economic data analysis. Returns trend components time series objects list time series.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/extract_trends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract trends from time series objects — extract_trends","text":"","code":"extract_trends(   ts_data,   methods = \"hp\",   window = NULL,   smoothing = NULL,   band = NULL,   align = NULL,   params = list(),   .quiet = FALSE )"},{"path":"https://viniciusoike.github.io/trendseries/reference/extract_trends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract trends from time series objects — extract_trends","text":"ts_data time series object (ts, xts, zoo) object convertible via tsbox. methods [character()] Character vector trend methods. Options: \"hp\", \"bk\", \"cf\", \"ma\", \"stl\", \"loess\", \"spline\", \"poly\", \"bn\", \"ucm\", \"hamilton\", \"exp_simple\", \"exp_double\", \"ewma\", \"wma\", \"zlema\", \"triangular\", \"sg\", \"kernel\", \"butter\", \"kalman\", \"median\", \"gaussian\". Default \"hp\". window [numeric(1)] | NULL Unified window/period parameter moving average methods (ma, wma, zlema, triangular, stl, sg, ewma, median, gaussian). Must positive. NULL, uses frequency-appropriate defaults. EWMA, specifies window size using TTR's optimized implementation. used simultaneously smoothing EWMA method. smoothing [numeric(1)] | NULL Unified smoothing parameter smoothing methods (hp, loess, spline, exp_*, ewma, kernel, kalman). hp: use large values (1600+) small values (0-1) get converted. EWMA: specifies alpha parameter (0-1) traditional exponential smoothing. used simultaneously window EWMA method. kernel: multiplier optimal bandwidth (1.0 = optimal, <1 = less smooth, >1 = smooth). kalman: controls ratio measurement process noise (higher = smoothing). others: typically 0-1 range. band [numeric(2)] | NULL Unified band parameter bandpass filters (bk, cf, butter). values must positive. bk/cf: Provide c(low, high) low/high periods quarters, e.g., c(6, 32). butter: Provide c(cutoff, order) cutoff normalized frequency (0-1) order integer, e.g., c(0.1, 2). align [character(1)] | NULL Unified alignment parameter moving average methods (ma, wma, triangular, gaussian). Valid values: \"center\" (default, uses surrounding values), \"right\" (causal, uses past values ), \"left\" (anti-causal, uses future values ). Note: triangular supports \"center\" \"right\". NULL, uses \"center\" default. params [list()] Optional list method-specific parameters fine control: HP Filter: hp_onesided (logical, default FALSE) - Use one-sided (real-time) filter instead two-sided Spline: spline_cv (logical/NULL) - Cross-validation method: NULL (none), TRUE (leave-one-), FALSE (GCV) Polynomial: poly_degree (integer, default 1), poly_raw (logical, default FALSE orthogonal polynomials) UCM: ucm_type (character, default \"level\") - Model type: \"level\", \"trend\", \"BSM\" Others: exp_beta, bn_ar_order, hamilton_h, hamilton_p, sg_poly_order, kernel_type, butter_type, kalman_measurement_noise, kalman_process_noise, median_endrule, gaussian_sigma, wma_weights, zlema_ratio. Note: Alignment parameters (ma_align, wma_align, triangular_align, gaussian_align) can still passed via params recommended use unified align parameter instead. .quiet [logical(1)] TRUE, suppress informational messages.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/extract_trends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract trends from time series objects — extract_trends","text":"single method, returns ts object. multiple methods, returns named list ts objects.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/extract_trends.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract trends from time series objects — extract_trends","text":"function focuses monthly (frequency = 12) quarterly (frequency = 4) economic data. uses established econometric methods appropriate defaults: HP Filter: lambda=1600 (quarterly), lambda=14400 (monthly). Supports two-sided one-sided (real-time) variants Baxter-King: Bandpass filter business cycles (6-32 quarters default) Christiano-Fitzgerald: Asymmetric bandpass filter Moving Average: Centered, frequency-appropriate windows STL: Seasonal-trend decomposition Loess: Local polynomial regression Spline: Smoothing splines Polynomial: Linear/polynomial trends Beveridge-Nelson: Permanent/transitory decomposition UCM: Unobserved Components Model (local level) Hamilton: Regression-based alternative HP filter Exponential Smoothing: Simple double exponential smoothing Advanced MA: EWMA, ALMA, DEMA, HMA variations Savitzky-Golay: Polynomial smoothing preserves peaks valleys Kernel Smoother: Non-parametric regression various kernel functions Butterworth: Clean frequency domain low-pass filtering Kalman Smoother: Adaptive filtering noisy time series Median Filter: Robust filtering using running medians remove outliers Gaussian Filter: Weighted average Gaussian (normal) density weights Parameter Usage Notes: HP Filter: Use hp_onesided=TRUE real-time analysis future data influence current estimates. One-sided filter appropriate nowcasting, policy analysis, avoiding look-ahead bias. Default two-sided filter optimal historical analysis. EWMA: Use either window (TTR optimization) smoothing (alpha parameter), Butterworth: band parameter expects c(cutoff, order) cutoff 0-1 normalized frequency Kalman: Use smoothing parameter params list fine control noise parameters Spline: Use spline_cv control cross-validation (NULL=none, TRUE=LOO-CV, FALSE=GCV) Polynomial: Use poly_raw=FALSE orthogonal polynomials (stable degree > 2) poly_raw=TRUE raw polynomials. Warning issued degree > 3 (overfitting risk). UCM: Choose model type - \"level\" (simplest), \"trend\" (time-varying slope), \"BSM\" (seasonal component, requires seasonal data)","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/extract_trends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract trends from time series objects — extract_trends","text":"","code":"# Single method hp_trend <- extract_trends(AirPassengers, methods = \"hp\") #> Computing HP filter (two-sided) with lambda = 14400  # Multiple methods with unified smoothing smooth_trends <- extract_trends(   AirPassengers,   methods = c(\"hp\", \"loess\", \"ewma\"),   smoothing = 0.3 ) #> Computing HP filter (two-sided) with lambda = 4320 #> Computing loess trend with span = 0.3 #> Computing EWMA with alpha = 0.3  # EWMA with window (uses TTR optimization) ewma_window <- extract_trends(AirPassengers, methods = \"ewma\", window = 12) #> Computing EWMA with window = 12  # EWMA with alpha (traditional formula) ewma_alpha <- extract_trends(AirPassengers, methods = \"ewma\", smoothing = 0.2) #> Computing EWMA with alpha = 0.2  # Moving averages with unified window ma_trends <- extract_trends(   AirPassengers,   methods = c(\"ma\", \"wma\", \"zlema\", \"triangular\"),   window = 8 ) #> Computing {window}-period moving average with center alignment #> Computing 8-period weighted MA with linear weights, center alignment #> Computing ZLEMA with window = 8, auto ratio #> Computing 8-period triangular MA with center alignment  # Bandpass filters with unified band bp_trends <- extract_trends(   AirPassengers,   methods = c(\"bk\", \"cf\"),   band = c(6, 32) ) #> Computing Baxter-King filter with bands [6, 32] #> Computing Christiano-Fitzgerald filter with bands [6, 32]  # Moving average with right alignment (causal filter) ma_causal <- extract_trends(   AirPassengers,   methods = \"ma\",   window = 12,   align = \"right\" ) #> Computing 2x{window}-period moving average with right alignment  # Signal processing methods with specific parameters finance_trends <- extract_trends(   AirPassengers,   methods = c(\"sg\", \"kalman\", \"butter\"),   window = 9,  # For Savitzky-Golay   band = c(0.05, 2),  # Butterworth cutoff and order   params = list(kalman_measurement_noise = 0.1)  # Kalman-specific parameter ) #> Computing Savitzky-Golay filter with window = 9, polynomial order = 2 #> Computing Kalman smoother with measurement noise = {measurement_noise} #> Computing Butterworth filter with cutoff = 0.05, order = 2  # Spline with cross-validation options spline_trends <- extract_trends(   AirPassengers,   methods = \"spline\",   params = list(spline_cv = FALSE)  # Use GCV instead of default ) #> Computing spline trend with automatic smoothing, GCV  # Polynomial with orthogonal vs raw polynomials poly_trends <- extract_trends(   AirPassengers,   methods = \"poly\",   params = list(poly_degree = 2, poly_raw = FALSE)  # Orthogonal (default) ) #> Computing orthogonal polynomial trend with degree = 2  # UCM with different model types ucm_trends <- extract_trends(   AirPassengers,   methods = \"ucm\",   params = list(ucm_type = \"BSM\")  # Basic Structural Model with seasonality ) #> Computing UCM trend: Basic Structural Model with seasonal component  # HP Filter: One-sided (real-time) vs Two-sided (historical) hp_realtime <- extract_trends(   AirPassengers,   methods = \"hp\",   params = list(hp_onesided = TRUE)  # For nowcasting and real-time analysis ) #> Computing HP filter (one-sided) with lambda = 14400  # Advanced: fine-tune specific methods custom_trends <- extract_trends(   AirPassengers,   methods = c(\"sg\", \"kalman\"),   window = 7,   params = list(sg_poly_order = 3) ) #> Computing Savitzky-Golay filter with window = 7, polynomial order = 3 #> Computing Kalman smoother with measurement noise = auto"},{"path":"https://viniciusoike.github.io/trendseries/reference/gdp_construction.html","id":null,"dir":"Reference","previous_headings":"","what":"GDP Construction Index — gdp_construction","title":"GDP Construction Index — gdp_construction","text":"Quarterly GDP construction sector index (Base: average 1995 = 100).","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/gdp_construction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GDP Construction Index — gdp_construction","text":"","code":"gdp_construction"},{"path":"https://viniciusoike.github.io/trendseries/reference/gdp_construction.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"GDP Construction Index — gdp_construction","text":"tibble quarterly observations: date Date column gdp_construction Construction index value","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/gdp_construction.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"GDP Construction Index — gdp_construction","text":"Brazilian Central Bank SGS (code 22087)","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/ibcbr.html","id":null,"dir":"Reference","previous_headings":"","what":"Central Bank Economic Activity Index — ibcbr","title":"Central Bank Economic Activity Index — ibcbr","text":"Monthly Central Bank Economic Activity Index (IBC-Br).","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/ibcbr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Central Bank Economic Activity Index — ibcbr","text":"","code":"ibcbr"},{"path":"https://viniciusoike.github.io/trendseries/reference/ibcbr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Central Bank Economic Activity Index — ibcbr","text":"tibble monthly observations: date Date column ibcbr Index (2003 = 100)","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/ibcbr.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Central Bank Economic Activity Index — ibcbr","text":"Brazilian Central Bank SGS (code 24363)","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/oil_derivatives.html","id":null,"dir":"Reference","previous_headings":"","what":"Oil Derivatives Production — oil_derivatives","title":"Oil Derivatives Production — oil_derivatives","text":"Monthly oil derivatives production Brazil.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/oil_derivatives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oil Derivatives Production — oil_derivatives","text":"","code":"oil_derivatives"},{"path":"https://viniciusoike.github.io/trendseries/reference/oil_derivatives.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Oil Derivatives Production — oil_derivatives","text":"tibble monthly observations: date Date column oil_derivatives Oil derivatives production","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/oil_derivatives.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Oil Derivatives Production — oil_derivatives","text":"Brazilian Central Bank SGS (code 1391)","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/retail_autofuel.html","id":null,"dir":"Reference","previous_headings":"","what":"UK Retail Sales - Automotive Fuel — retail_autofuel","title":"UK Retail Sales - Automotive Fuel — retail_autofuel","text":"Monthly retail sales index automotive fuel UK. Chained volume measure retail sales.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/retail_autofuel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UK Retail Sales - Automotive Fuel — retail_autofuel","text":"","code":"retail_autofuel"},{"path":"https://viniciusoike.github.io/trendseries/reference/retail_autofuel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UK Retail Sales - Automotive Fuel — retail_autofuel","text":"tibble monthly observations: date Date column automotive_fuel Retail sales index (chained volume) name Series name frequency Frequency (\"M\") source Data source (\"ONS\")","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/retail_autofuel.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"UK Retail Sales - Automotive Fuel — retail_autofuel","text":"UK Office National Statistics (ONS)","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/retail_households.html","id":null,"dir":"Reference","previous_headings":"","what":"UK Retail Sales - Household Goods Stores — retail_households","title":"UK Retail Sales - Household Goods Stores — retail_households","text":"Monthly retail sales index household goods stores UK. Chained volume measure retail sales.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/retail_households.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UK Retail Sales - Household Goods Stores — retail_households","text":"","code":"retail_households"},{"path":"https://viniciusoike.github.io/trendseries/reference/retail_households.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UK Retail Sales - Household Goods Stores — retail_households","text":"tibble monthly observations: date Date column household_goods_stores Retail sales index (chained volume) name Series name frequency Frequency (\"M\") source Data source (\"ONS\")","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/retail_households.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"UK Retail Sales - Household Goods Stores — retail_households","text":"UK Office National Statistics (ONS)","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/series_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Series Metadata — series_metadata","title":"Series Metadata — series_metadata","text":"Metadata BCB economic series package.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/series_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Series Metadata — series_metadata","text":"","code":"series_metadata"},{"path":"https://viniciusoike.github.io/trendseries/reference/series_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Series Metadata — series_metadata","text":"tibble metadata: series_name Short series identifier description Full series description frequency Data frequency (M = monthly, Q = quarterly) first_obs First observation date last_obs Last observation date source Data source BCB code","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/series_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Series Metadata — series_metadata","text":"Brazilian Central Bank SGS","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/ts_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time series to tibble — ts_to_df","title":"Convert time series to tibble — ts_to_df","text":"Convert time series tibble","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/ts_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time series to tibble — ts_to_df","text":"","code":"ts_to_df(x, date_colname = NULL, value_colname = NULL)"},{"path":"https://viniciusoike.github.io/trendseries/reference/ts_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time series to tibble — ts_to_df","text":"x time series ts object date_colname Optional name date column value_colname Optional name value column","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/ts_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert time series to tibble — ts_to_df","text":"tibble","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/ts_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert time series to tibble — ts_to_df","text":"","code":"# example code ts_to_df(AirPassengers) #> # A tibble: 144 × 2 #>    date       value #>    <date>     <dbl> #>  1 1949-01-01   112 #>  2 1949-02-01   118 #>  3 1949-03-01   132 #>  4 1949-04-01   129 #>  5 1949-05-01   121 #>  6 1949-06-01   135 #>  7 1949-07-01   148 #>  8 1949-08-01   148 #>  9 1949-09-01   136 #> 10 1949-10-01   119 #> # ℹ 134 more rows  # Using a custom name for the value column ts_to_df(AirPassengers, value_colname = \"passengers\") #> # A tibble: 144 × 2 #>    date       passengers #>    <date>          <dbl> #>  1 1949-01-01        112 #>  2 1949-02-01        118 #>  3 1949-03-01        132 #>  4 1949-04-01        129 #>  5 1949-05-01        121 #>  6 1949-06-01        135 #>  7 1949-07-01        148 #>  8 1949-08-01        148 #>  9 1949-09-01        136 #> 10 1949-10-01        119 #> # ℹ 134 more rows"},{"path":"https://viniciusoike.github.io/trendseries/reference/utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility Functions — utils","title":"Utility Functions — utils","text":"Core utility functions trendseries package including parameter processing, method categorization, helper operators.","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/vehicles.html","id":null,"dir":"Reference","previous_headings":"","what":"Vehicle Production — vehicles","title":"Vehicle Production — vehicles","text":"Monthly vehicle production Brazil (thousands units).","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/vehicles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vehicle Production — vehicles","text":"","code":"vehicles"},{"path":"https://viniciusoike.github.io/trendseries/reference/vehicles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vehicle Production — vehicles","text":"tibble monthly observations: date Date column vehicles Vehicle production thousands units","code":""},{"path":"https://viniciusoike.github.io/trendseries/reference/vehicles.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Vehicle Production — vehicles","text":"Brazilian Central Bank SGS (code 1378)","code":""},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"trendseries-100","dir":"Changelog","previous_headings":"","what":"trendseries 1.0.0","title":"trendseries 1.0.0","text":"Release Date: January 2025","code":""},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"first-production-release-1-0-0","dir":"Changelog","previous_headings":"","what":"First Production Release","title":"trendseries 1.0.0","text":"first production release trendseries, providing modern, pipe-friendly interface extracting trends economic time series data.","code":""},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"key-features-1-0-0","dir":"Changelog","previous_headings":"First Production Release","what":"Key Features","title":"trendseries 1.0.0","text":"21 Trend Extraction Methods: Econometric filters: HP filter (one-sided two-sided), Baxter-King, Christiano-Fitzgerald, Hamilton filter, Beveridge-Nelson decomposition, Unobserved Components Model (UCM) Moving averages: Simple (SMA), Weighted (WMA), Exponential (EWMA), Zero-lag (ZLEMA), Triangular, Median, Gaussian-weighted Smoothing methods: STL decomposition, Loess, Splines, Polynomial trends, Simple/Double exponential smoothing Signal processing: Kalman filter/smoother, Savitzky-Golay, Butterworth, Kernel smoother Two-Function API: augment_trends(): Pipe-friendly function tibble/data.frame workflows grouped operations extract_trends(): Direct time series analysis ts/xts/zoo objects Unified Parameter System: Consistent interface window, smoothing, band, align, params parameters across methods Smart Economic Defaults: HP filter: λ=1600 (quarterly), λ=14400 (monthly) Moving averages: Frequency-appropriate windows (4 quarters, 12 months) Bandpass filters: 6-32 quarter business cycle range Performance Optimizations: C++ implementations via RcppRoll fast rolling statistics Optimized exponential smoothing automatic parameter selection Efficient signal processing filters","code":""},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"major-improvements-1-0-0","dir":"Changelog","previous_headings":"First Production Release","what":"Major Improvements","title":"trendseries 1.0.0","text":"Mathematical Correctness: 21 methods validated theoretical accuracy proper implementation EWMA Dual Interface: Support window-based (TTR optimization) alpha-based (traditional formula) approaches One-sided HP Filter: Real-time analysis support hp_onesided=TRUE parameter nowcasting policy analysis Align Parameter: Flexible positioning moving averages (left/center/right) enabling causal anti-causal filters Modern R Patterns: Native pipe |>, cli messaging, comprehensive error handling Scale Invariance: Kernel smoother theoretically sound bandwidth selection Robust Error Handling: Informative messages actionable suggestions using cli package","code":""},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"quality-metrics-1-0-0","dir":"Changelog","previous_headings":"First Production Release","what":"Quality Metrics","title":"trendseries 1.0.0","text":"R CMD check: 0 errors | 0 warnings | 0 notes (perfect score) Test suite: 317 passing tests across 9 test files Documentation: examples verified working Code quality: duplicates, modern patterns, clean dependencies","code":""},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"included-datasets-1-0-0","dir":"Changelog","previous_headings":"First Production Release","what":"Included Datasets","title":"trendseries 1.0.0","text":"package includes 10 economic datasets examples testing: Brazilian data (BCB): gdp_construction, ibcbr, vehicles, oil_derivatives, electric UK data (ONS): retail_households, retail_autofuel Coffee prices (CEPEA): coffee_arabica, coffee_robusta (daily data) Metadata: series_metadata","code":""},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"package-scope-1-0-0","dir":"Changelog","previous_headings":"First Production Release","what":"Package Scope","title":"trendseries 1.0.0","text":"Optimized monthly (frequency=12) quarterly (frequency=4) economic data, smart defaults tailored business cycle analysis. Methods like STL moving averages also support daily frequencies.","code":""},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"technical-details-1-0-0","dir":"Changelog","previous_headings":"First Production Release","what":"Technical Details","title":"trendseries 1.0.0","text":"Minimum R version: 4.1.0 Dependencies: mFilter, hpfilter, RcppRoll, forecast, dlm, signal, tsbox, cli, lubridate, tibble License: MIT Repository: https://github.com/viniciusoike/trendseries Website: https://viniciusoike.github.io/trendseries/","code":""},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"installation-1-0-0","dir":"Changelog","previous_headings":"First Production Release","what":"Installation","title":"trendseries 1.0.0","text":"","code":"# Install from GitHub # install.packages(\"devtools\") devtools::install_github(\"viniciusoike/trendseries\")"},{"path":"https://viniciusoike.github.io/trendseries/news/index.html","id":"acknowledgments-1-0-0","dir":"Changelog","previous_headings":"First Production Release","what":"Acknowledgments","title":"trendseries 1.0.0","text":"package builds upon excellent work R community: mFilter (economic filters), hpfilter (one-sided HP filter), RcppRoll (fast C++ rolling statistics), forecast (exponential smoothing), dlm (Kalman filtering), signal (signal processing), tsbox (time series conversions).","code":""}]
